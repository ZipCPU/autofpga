`timescale	1ps / 1ps
////////////////////////////////////////////////////////////////////////////////
//
// Filename:	../demo-out/main.v
//
// Project:	AutoFPGA, a utility for composing FPGA designs from peripherals
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	./autofpga ./autofpga -d -o ../demo-out -I ../auto-data global.txt clock.txt bkram.txt flash.txt zipmaster.txt wbubus.txt dlyarbiter.txt sdvidram.txt xpander.txt vidarbiter.txt gps.txt icape.txt mdio.txt spio.txt wboledbw.txt rtcdate.txt hdmi.txt clkcounter.txt gpio.txt pwrcount.txt wbpmic.txt version.txt buserr.txt pic.txt rtcgps.txt wbmouse.txt sdspi.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2017-2018, Gisselquist Technology, LLC
//
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of  the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
//
// License:	GPL, v3, as defined and found on www.gnu.org,
//		http://www.gnu.org/licenses/gpl.html
//
//
////////////////////////////////////////////////////////////////////////////////
//
//
`default_nettype	none
//
//
// Here is a list of defines which may be used, post auto-design
// (not post-build), to turn particular peripherals (and bus masters)
// on and off.  In particular, to turn off support for a particular
// design component, just comment out its respective `define below.
//
// These lines are taken from the respective @ACCESS tags for each of our
// components.  If a component doesn't have an @ACCESS tag, it will not
// be listed here.
//
// First, the independent access fields for any bus masters
`define	WBUBUS_MASTER
`define	INCLUDE_ZIPCPU
// And then for the independent peripherals
`define	RTC_ACCESS
`define	MICROPHONE_ACCESS
`define	GPIO_ACCESS
`define	HDMI_OUT_EDID_ACCESS
`define	CFG_ACCESS
`define	SPIO_ACCESS
`define	NETCTRL_ACCESS
`define	!OLEDBW_ACCESS
`define	GPSTRK_ACCESS
`define	MOUSE_ACCESS
`define	HDMI_IN_EDID_ACCESS
`define	FLASH_ACCESS
`define	PWRCOUNT_ACCESS
`define	SDSPI_ACCESS
`define	HDMIIN_ACCESS
`define	SDRAM_ACCESS
`define	BUSPIC_ACCESS
`define	GPSUART_ACCESS
`define	BKRAM_ACCESS
//
//
// The list of those things that have @DEPENDS tags
//
//
//
// Dependencies
// Any core with both an @ACCESS and a @DEPENDS tag will show up here.
// The @DEPENDS tag will turn into a series of ifdef's, with the @ACCESS
// being defined only if all of the ifdef's are true//
`ifdef	RTC_ACCESS
`define	RTCDATE_ACCESS
`endif	// RTC_ACCESS
`ifdef	FLASH_ACCESS
`define	FLASHCFG_ACCESS
`endif	// FLASH_ACCESS
`ifdef	SDSPI_ACCESS
`define	SDSPI_SCOPE
`endif	// SDSPI_ACCESS
//
// End of dependency list
//
//
//
//
// Finally, we define our main module itself.  We start with the list of
// I/O ports, or wires, passed into (or out of) the main function.
//
// These fields are copied verbatim from the respective I/O port lists,
// from the fields given by @MAIN.PORTLIST
//
module	main(i_clk, i_reset,
		// The PMic3 microphone wires
		o_mic_csn, o_mic_sck, i_mic_din,
		// GPIO ports
		i_gpio, o_gpio,
		// HDMI out (source) EDID I2C ports
		i_hdmi_out_scl, i_hdmi_out_sda, o_hdmi_out_scl, o_hdmi_out_sda,
		// SPIO interface
		i_sw, i_btnc, i_btnd, i_btnl, i_btnr, i_btnu, o_led,
		// The ethernet MDIO wires
		o_mdclk, o_mdio, o_mdwe, i_mdio,
		// OLED control interface (roughly SPI)
		o_oled_sck, o_oled_mosi, o_oled_dcn,
		o_oled_reset_n, o_oled_panel_en, o_oled_logic_en,
		// The GPS 1PPS signal port
		i_gps_pps,
		// The PS/2 Mouse
		i_ps2, o_ps2,
		// HDMI input EDID I2C ports
		i_hdmi_in_scl, i_hdmi_in_sda, o_hdmi_in_scl, o_hdmi_in_sda,
 		// UART/host to wishbone interface
 		i_host_uart_rx, o_host_uart_tx,
		// The Universal QSPI Flash
		o_qspi_cs_n, o_qspi_sck, o_qspi_dat, i_qspi_dat, o_qspi_mod,
		// The SD-Card wires
		o_sd_sck, o_sd_cmd, o_sd_data, i_sd_cmd, i_sd_data, i_sd_detect,
		// HDMI input ports
		i_hdmi_in_clk,
		i_hdmi_in_r, i_hdmi_in_g, i_hdmi_in_b,
		i_hdmi_in_hsclk,
		// HDMI input delay control
		i_hdmi_in_actual_delay_r, i_hdmi_in_actual_delay_g,
		i_hdmi_in_actual_delay_b, o_hdmi_in_delay,
		i_cpu_reset,
		o_sdram_cyc, o_sdram_stb, o_sdram_we,
				o_sdram_addr, o_sdram_data, o_sdram_sel,
			i_sdram_ack, i_sdram_stall, i_sdram_data,
		// HDMI output ports
		i_hdmi_out_clk,
		// HDMI output pixels
		o_hdmi_out_r, o_hdmi_out_g, o_hdmi_out_b,
		// The GPS-UART
		i_gpsu_rx, o_gpsu_tx);
//
// Any parameter definitions
//
// These are drawn from anything with a MAIN.PARAM definition.
// As they aren't connected to the toplevel at all, it would
// be best to use localparam over parameter, but here we don't
// check
	localparam	ICAPE_LGDIV=3;
	localparam [31:0] GPSCLOCK_DEFAULT_STEP = 32'haabcc771;
	//
	//
	// Variables/definitions needed by the ZipCPU BUS master
	//
	//
	// A 32-bit address indicating where the ZipCPU should start running
	// from
`ifdef	FLASH_ACCESS
	localparam	RESET_ADDRESS = 408944640;
`else
	localparam	RESET_ADDRESS = 369098752;
`endif
	//
	// The number of valid bits on the bus
	localparam	ZIP_ADDRESS_WIDTH = 28; // Zip-CPU address width
	//
	// Number of ZipCPU interrupts
	localparam	ZIP_INTS = 16;
	//
	// ZIP_START_HALTED
	//
	// A boolean, indicating whether or not the ZipCPU be halted on startup?
	localparam	ZIP_START_HALTED=1'b1;
//
// The next step is to declare all of the various ports that were just
// listed above.  
//
// The following declarations are taken from the values of the various
// @MAIN.IODECL keys.
//
	input	wire		i_clk;
	// verilator lint_off UNUSED
	input	wire		i_reset;
	// verilator lint_on UNUSED
	output	wire		o_mic_csn, o_mic_sck;
	input	wire		i_mic_din;
	localparam	NGPI = 16, NGPO=16;
	// GPIO ports
	input		[(NGPI-1):0]	i_gpio;
	output	wire	[(NGPO-1):0]	o_gpio;
	// HDMI input EDID I2C ports
	input	wire		i_hdmi_out_scl, i_hdmi_out_sda;
	output	wire		o_hdmi_out_scl, o_hdmi_out_sda;
	// SPIO interface
	input	wire	[8-1:0]	i_sw;
	input	wire		i_btnc, i_btnd, i_btnl, i_btnr, i_btnu;
	output	wire	[8-1:0]	o_led;
	// Ethernet control (MDIO)
	output	wire		o_mdclk, o_mdio, o_mdwe;
	input	wire		i_mdio;
	// OLEDBW interface
	output	wire		o_oled_sck, o_oled_mosi,
				o_oled_dcn, o_oled_reset_n, o_oled_panel_en,
				o_oled_logic_en;
	//The GPS Clock
	input	wire		i_gps_pps;
	// The PS/2 Mouse
	input		[1:0]	i_ps2;
	output	wire	[1:0]	o_ps2;
	// HDMI input EDID I2C ports
	input	wire		i_hdmi_in_scl, i_hdmi_in_sda;
	output	wire		o_hdmi_in_scl, o_hdmi_in_sda;
	input	wire		i_host_uart_rx;
	output	wire		o_host_uart_tx;
	// The Universal QSPI flash
	output	wire		o_qspi_cs_n, o_qspi_sck;
	output	wire	[3:0]	o_qspi_dat;
	input	wire	[3:0]	i_qspi_dat;
	output	wire	[1:0]	o_qspi_mod;
	// SD-Card declarations
	output	wire		o_sd_sck, o_sd_cmd;
	output	wire	[3:0]	o_sd_data;
	// verilator lint_off UNUSED
	input	wire		i_sd_cmd;
	input	wire	[3:0]	i_sd_data;
	input	wire		i_sd_detect;
	// verilator lint_on  UNUSED
	// HDMI input ports
	input	wire		i_hdmi_in_clk;
	input	wire	[9:0]	i_hdmi_in_r, i_hdmi_in_g, i_hdmi_in_b;
	// verilator lint_off UNUSED
	input	wire		i_hdmi_in_hsclk;
	// verilator lint_on  UNUSED
	// Sub-pixel delay control
	input	wire	[4:0]	i_hdmi_in_actual_delay_r;
	input	wire	[4:0]	i_hdmi_in_actual_delay_g;
	input	wire	[4:0]	i_hdmi_in_actual_delay_b;
	output	wire	[4:0]	o_hdmi_in_delay;
	input	wire		i_cpu_reset;
	output	wire	o_sdram_cyc, o_sdram_stb, o_sdram_we;
	output	wire	[(25-1):0]	o_sdram_addr;
	output	wire	[(128-1):0]	o_sdram_data;
	output	wire	[(128/8)-1:0]	o_sdram_sel;
	//
	input	wire	i_sdram_ack;
	input	wire	i_sdram_stall;
	input	wire	[(128-1):0]	i_sdram_data;
	// Verilator lint_off UNUSED
	// HDMI output clock
	input	wire	i_hdmi_out_clk;
	// Verilator lint_on  UNUSED
	// HDMI output pixels
	output	wire	[9:0]	o_hdmi_out_r, o_hdmi_out_g, o_hdmi_out_b;
	input	wire		i_gpsu_rx;
	output	wire		o_gpsu_tx;
	// Make Verilator happy ... defining bus wires for lots of components
	// often ends up with unused wires lying around.  We'll turn off
	// Ver1lator's lint warning here that checks for unused wires.
	// verilator lint_off UNUSED



	//
	// Declaring interrupt lines
	//
	// These declarations come from the various components values
	// given under the @INT.<interrupt name>.WIRE key.
	//
	wire	rtc_int;	// rtc.INT.RTC.WIRE
	wire	pmic_int;	// pmic.INT.MIC.WIRE
	wire	gpio_int;	// gpio.INT.GPIO.WIRE
	wire	edid_out_int;	// edout.INT.EDID.WIRE
	wire	scop_edid_int;	// scop_edid.INT.SCOPE.WIRE
	wire	spio_int;	// spio.INT.SPIO.WIRE
	wire	oled_int;	// oled.INT.OLED.WIRE
	wire	ck_pps2;	// gck.INT.PPS.WIRE
	wire	scop_hdmiin_int;	// scope_hdmiin.INT.HINSCOPE.WIRE
	wire	mous_interrupt;	// mous.INT.MOUSE.WIRE
	wire	scope_sdcard_int;	// scope_sdcard.INT.SDSCOPE.WIRE
	wire	sdcard_int;	// sdcard.INT.SDCARD.WIRE
	wire	hdmiin_int;	// hdmiin.INT.VSYNC.WIRE
	wire	zip_cpu_int;	// zip.INT.ZIP.WIRE
	wire	w_bus_int;	// buspic.INT.BUS.WIRE
	wire	gpsutx_int;	// gpsu.INT.GPSTX.WIRE
	wire	gpsutxf_int;	// gpsu.INT.GPSTXF.WIRE
	wire	gpsurx_int;	// gpsu.INT.GPSRX.WIRE
	wire	gpsurxf_int;	// gpsu.INT.GPSRXF.WIRE


	//
	// Component declarations
	//
	// These declarations come from the @MAIN.DEFNS keys found in the
	// various components comprising the design.
	//
// Looking for string: MAIN.DEFNS
	// Definitions in support of the GPS driven RTC
	// This clock step is designed to match 100000000 Hz
	localparam	[31:0]	RTC_CLKSTEP = 32'h002af31d;
	wire	rtc_ppd;
	reg	r_rtc_ack;
`ifdef	GPSTRK_ACCESS
	wire	rtc_pps;
`endif
`include "builddate.v"
	reg	r_sysclk_ack;
	wire	[31:0]	edido_dbg;
	wire		edid_scope_trigger;
	wire	[30:0]	edid_scope_data;
	reg	r_clkhdmiin_ack;
	reg	r_clkhdmiout_ack;
	wire	[5-1:0]	w_btn;
	wire	[8-1:0]	w_led;
	reg	[28-1:0]	r_buserr_addr;
// BUILDTIME doesnt need to include builddate.v a second time
// `include "builddate.v"
	wire	gps_pps, gps_led, gps_locked, gps_tracking;
	wire	[63:0]	gps_now, gps_err, gps_step;
	wire	[1:0]	gps_dbg_tick;
	wire		ck_pps;
	wire	[31:0]	hdmi_in_data;
	// scrn_mouse is a 32-bit field containing 16-bits of x-position and
	// 16-bits of y position, limited to the size of the screen.
	wire	[31:0]	scrn_mouse;
	wire	[31:0]	edid_dbg;
	wire	scope_sdcard_trigger,
		scope_sdcard_ce;
	//
	//
	// UART interface
	//
	//
	localparam [23:0] BUSUART = 24'h64;	// 1000000 baud
	//
	wire	w_ck_uart, w_uart_tx;
	wire		rx_host_stb;
	wire	[7:0]	rx_host_data;
	wire		tx_host_stb;
	wire	[7:0]	tx_host_data;
	wire		tx_host_busy;
	//
	// Definitions for the WB-UART converter.  We really only need one
	// (more) non-bus wire--one to use to select if we are interacting
	// with the ZipCPU or not.
	wire		wbu_zip_sel;
	wire	[0:0]	wbubus_dbg;
`ifndef	INCLUDE_ZIPCPU
	//
	// The bus-console depends upon the zip_dbg wires.  If there is no
	// ZipCPU defining them, we'll need to define them here anyway.
	//
	wire		zip_dbg_ack, zip_dbg_stall;
	wire	[31:0]	zip_dbg_data;
`endif
	// Definitions for the flash debug port
	wire		flash_dbg_trigger;
	wire	[31:0]	flash_debug;
	reg	[31:0]	r_pwrcount_data;
	wire[31:0]	sdspi_debug;
`ifndef	GPSTRK_ACCESS
	reg	[31:0]	r_subseconds_data;
`endif
	wire	[31:0]	hin_dbg_scope;
	wire	[29:0]	hin_pixels;
	wire	[9:0]	hdmi_in_r;
	wire	[9:0]	hdmi_in_g;
	wire	[9:0]	hdmi_in_b;
	reg [31:0]	r_hdmi_scope_frame_offset_data;
	reg	r_hdmi_scope_frame_offset_ack;
	initial	r_hdmi_scope_frame_offset_data=0;
	always @(posedge i_clk)
		if ((wb_stb)&&(hdmi_scope_frame_offset_sel)&&(wb_we))
			r_hdmi_scope_frame_offset_data <= wb_data;

	assign	hdmi_scope_frame_offset_data = r_hdmi_scope_frame_offset_data;
	assign	hdmi_scope_frame_offset_stall= 1'b0;
	always @(posedge i_clk)
		r_hdmi_scope_frame_offset_ack <= (wb_stb)&&(hdmi_scope_frame_offset_sel);
	// ZipSystem/ZipCPU connection definitions
	// All we define here is a set of scope wires
	wire	[31:0]	zip_debug;
	wire		zip_trigger;
	wire	[ZIP_INTS-1:0] zip_int_vector;
	// Bus arbiter's internal lines
	wire		wbu_dwbi_cyc, wbu_dwbi_stb, wbu_dwbi_we,
			wbu_dwbi_ack, wbu_dwbi_stall, wbu_dwbi_err;
	wire	[(28-1):0]	wbu_dwbi_addr;
	wire	[(32-1):0]	wbu_dwbi_odata, wbu_dwbi_idata;
	wire	[(4-1):0]	wbu_dwbi_sel;
	// Bus arbiter's internal lines
	wire		sdram_arbiteri_cyc, sdram_arbiteri_stb, sdram_arbiteri_we,
			sdram_arbiteri_ack, sdram_arbiteri_stall, sdram_arbiteri_err;
	wire	[(25-1):0]	sdram_arbiteri_addr;
	wire	[(128-1):0]	sdram_arbiteri_odata, sdram_arbiteri_idata;
	wire	[(16-1):0]	sdram_arbiteri_sel;
	wire	w_gpsu_cts_n, w_gpsu_rts_n;
	assign	w_gpsu_cts_n=1'b1;
	wire	tb_pps;


	//
	// Declaring interrupt vector wires
	//
	// These declarations come from the various components having
	// PIC and PIC.MAX keys.
	//
	wire	[14:0]	sys_int_vector;
	wire	[14:0]	alt_int_vector;
	wire	[14:0]	bus_int_vector;
	//
	//
	// Define bus wires
	//
	//

	// Bus wb
	// Wishbone definitions for bus wb, component wbu_dwb
	// Verilator lint_off UNUSED
	wire		wb_wbu_dwb_cyc, wb_wbu_dwb_stb, wb_wbu_dwb_we;
	wire	[27:0]	wb_wbu_dwb_addr;
	wire	[31:0]	wb_wbu_dwb_data;
	wire	[3:0]	wb_wbu_dwb_sel;
	wire		wb_wbu_dwb_stall, wb_wbu_dwb_ack, wb_wbu_dwb_err;
	wire	[31:0]	wb_wbu_dwb_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb, component zip_dwb
	// Verilator lint_off UNUSED
	wire		wb_zip_dwb_cyc, wb_zip_dwb_stb, wb_zip_dwb_we;
	wire	[27:0]	wb_zip_dwb_addr;
	wire	[31:0]	wb_zip_dwb_data;
	wire	[3:0]	wb_zip_dwb_sel;
	wire		wb_zip_dwb_stall, wb_zip_dwb_ack, wb_zip_dwb_err;
	wire	[31:0]	wb_zip_dwb_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(SIO), component buildtime
	// Verilator lint_off UNUSED
	wire		wb_buildtime_cyc, wb_buildtime_stb, wb_buildtime_we;
	wire	[27:0]	wb_buildtime_addr;
	wire	[31:0]	wb_buildtime_data;
	wire	[3:0]	wb_buildtime_sel;
	wire		wb_buildtime_stall, wb_buildtime_ack, wb_buildtime_err;
	wire	[31:0]	wb_buildtime_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(SIO), component buserr
	// Verilator lint_off UNUSED
	wire		wb_buserr_cyc, wb_buserr_stb, wb_buserr_we;
	wire	[27:0]	wb_buserr_addr;
	wire	[31:0]	wb_buserr_data;
	wire	[3:0]	wb_buserr_sel;
	wire		wb_buserr_stall, wb_buserr_ack, wb_buserr_err;
	wire	[31:0]	wb_buserr_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(SIO), component buspic
	// Verilator lint_off UNUSED
	wire		wb_buspic_cyc, wb_buspic_stb, wb_buspic_we;
	wire	[27:0]	wb_buspic_addr;
	wire	[31:0]	wb_buspic_data;
	wire	[3:0]	wb_buspic_sel;
	wire		wb_buspic_stall, wb_buspic_ack, wb_buspic_err;
	wire	[31:0]	wb_buspic_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(SIO), component clkhdmiin
	// Verilator lint_off UNUSED
	wire		wb_clkhdmiin_cyc, wb_clkhdmiin_stb, wb_clkhdmiin_we;
	wire	[27:0]	wb_clkhdmiin_addr;
	wire	[31:0]	wb_clkhdmiin_data;
	wire	[3:0]	wb_clkhdmiin_sel;
	wire		wb_clkhdmiin_stall, wb_clkhdmiin_ack, wb_clkhdmiin_err;
	wire	[31:0]	wb_clkhdmiin_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(SIO), component clkhdmiout
	// Verilator lint_off UNUSED
	wire		wb_clkhdmiout_cyc, wb_clkhdmiout_stb, wb_clkhdmiout_we;
	wire	[27:0]	wb_clkhdmiout_addr;
	wire	[31:0]	wb_clkhdmiout_data;
	wire	[3:0]	wb_clkhdmiout_sel;
	wire		wb_clkhdmiout_stall, wb_clkhdmiout_ack, wb_clkhdmiout_err;
	wire	[31:0]	wb_clkhdmiout_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(SIO), component gpio
	// Verilator lint_off UNUSED
	wire		wb_gpio_cyc, wb_gpio_stb, wb_gpio_we;
	wire	[27:0]	wb_gpio_addr;
	wire	[31:0]	wb_gpio_data;
	wire	[3:0]	wb_gpio_sel;
	wire		wb_gpio_stall, wb_gpio_ack, wb_gpio_err;
	wire	[31:0]	wb_gpio_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(SIO), component hdmi_scope_frame_offset
	// Verilator lint_off UNUSED
	wire		wb_hdmi_scope_frame_offset_cyc, wb_hdmi_scope_frame_offset_stb, wb_hdmi_scope_frame_offset_we;
	wire	[27:0]	wb_hdmi_scope_frame_offset_addr;
	wire	[31:0]	wb_hdmi_scope_frame_offset_data;
	wire	[3:0]	wb_hdmi_scope_frame_offset_sel;
	wire		wb_hdmi_scope_frame_offset_stall, wb_hdmi_scope_frame_offset_ack, wb_hdmi_scope_frame_offset_err;
	wire	[31:0]	wb_hdmi_scope_frame_offset_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(SIO), component pwrcount
	// Verilator lint_off UNUSED
	wire		wb_pwrcount_cyc, wb_pwrcount_stb, wb_pwrcount_we;
	wire	[27:0]	wb_pwrcount_addr;
	wire	[31:0]	wb_pwrcount_data;
	wire	[3:0]	wb_pwrcount_sel;
	wire		wb_pwrcount_stall, wb_pwrcount_ack, wb_pwrcount_err;
	wire	[31:0]	wb_pwrcount_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(SIO), component rtcdate
	// Verilator lint_off UNUSED
	wire		wb_rtcdate_cyc, wb_rtcdate_stb, wb_rtcdate_we;
	wire	[27:0]	wb_rtcdate_addr;
	wire	[31:0]	wb_rtcdate_data;
	wire	[3:0]	wb_rtcdate_sel;
	wire		wb_rtcdate_stall, wb_rtcdate_ack, wb_rtcdate_err;
	wire	[31:0]	wb_rtcdate_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(SIO), component spio
	// Verilator lint_off UNUSED
	wire		wb_spio_cyc, wb_spio_stb, wb_spio_we;
	wire	[27:0]	wb_spio_addr;
	wire	[31:0]	wb_spio_data;
	wire	[3:0]	wb_spio_sel;
	wire		wb_spio_stall, wb_spio_ack, wb_spio_err;
	wire	[31:0]	wb_spio_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(SIO), component subseconds
	// Verilator lint_off UNUSED
	wire		wb_subseconds_cyc, wb_subseconds_stb, wb_subseconds_we;
	wire	[27:0]	wb_subseconds_addr;
	wire	[31:0]	wb_subseconds_data;
	wire	[3:0]	wb_subseconds_sel;
	wire		wb_subseconds_stall, wb_subseconds_ack, wb_subseconds_err;
	wire	[31:0]	wb_subseconds_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(SIO), component sysclk
	// Verilator lint_off UNUSED
	wire		wb_sysclk_cyc, wb_sysclk_stb, wb_sysclk_we;
	wire	[27:0]	wb_sysclk_addr;
	wire	[31:0]	wb_sysclk_data;
	wire	[3:0]	wb_sysclk_sel;
	wire		wb_sysclk_stall, wb_sysclk_ack, wb_sysclk_err;
	wire	[31:0]	wb_sysclk_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(SIO), component version
	// Verilator lint_off UNUSED
	wire		wb_version_cyc, wb_version_stb, wb_version_we;
	wire	[27:0]	wb_version_addr;
	wire	[31:0]	wb_version_data;
	wire	[3:0]	wb_version_sel;
	wire		wb_version_stall, wb_version_ack, wb_version_err;
	wire	[31:0]	wb_version_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(DIO), component gck
	// Verilator lint_off UNUSED
	wire		wb_gck_cyc, wb_gck_stb, wb_gck_we;
	wire	[27:0]	wb_gck_addr;
	wire	[31:0]	wb_gck_data;
	wire	[3:0]	wb_gck_sel;
	wire		wb_gck_stall, wb_gck_ack, wb_gck_err;
	wire	[31:0]	wb_gck_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(DIO), component mous
	// Verilator lint_off UNUSED
	wire		wb_mous_cyc, wb_mous_stb, wb_mous_we;
	wire	[27:0]	wb_mous_addr;
	wire	[31:0]	wb_mous_data;
	wire	[3:0]	wb_mous_sel;
	wire		wb_mous_stall, wb_mous_ack, wb_mous_err;
	wire	[31:0]	wb_mous_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(DIO), component oled
	// Verilator lint_off UNUSED
	wire		wb_oled_cyc, wb_oled_stb, wb_oled_we;
	wire	[27:0]	wb_oled_addr;
	wire	[31:0]	wb_oled_data;
	wire	[3:0]	wb_oled_sel;
	wire		wb_oled_stall, wb_oled_ack, wb_oled_err;
	wire	[31:0]	wb_oled_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(DIO), component rtc
	// Verilator lint_off UNUSED
	wire		wb_rtc_cyc, wb_rtc_stb, wb_rtc_we;
	wire	[27:0]	wb_rtc_addr;
	wire	[31:0]	wb_rtc_data;
	wire	[3:0]	wb_rtc_sel;
	wire		wb_rtc_stall, wb_rtc_ack, wb_rtc_err;
	wire	[31:0]	wb_rtc_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(DIO), component gtb
	// Verilator lint_off UNUSED
	wire		wb_gtb_cyc, wb_gtb_stb, wb_gtb_we;
	wire	[27:0]	wb_gtb_addr;
	wire	[31:0]	wb_gtb_data;
	wire	[3:0]	wb_gtb_sel;
	wire		wb_gtb_stall, wb_gtb_ack, wb_gtb_err;
	wire	[31:0]	wb_gtb_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(DIO), component hdmiin
	// Verilator lint_off UNUSED
	wire		wb_hdmiin_cyc, wb_hdmiin_stb, wb_hdmiin_we;
	wire	[27:0]	wb_hdmiin_addr;
	wire	[31:0]	wb_hdmiin_data;
	wire	[3:0]	wb_hdmiin_sel;
	wire		wb_hdmiin_stall, wb_hdmiin_ack, wb_hdmiin_err;
	wire	[31:0]	wb_hdmiin_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(DIO), component wb_sio
	// Verilator lint_off UNUSED
	wire		wb_sio_cyc, wb_sio_stb, wb_sio_we;
	wire	[27:0]	wb_sio_addr;
	wire	[31:0]	wb_sio_data;
	wire	[3:0]	wb_sio_sel;
	wire		wb_sio_stall, wb_sio_ack, wb_sio_err;
	wire	[31:0]	wb_sio_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(DIO), component edin
	// Verilator lint_off UNUSED
	wire		wb_edin_cyc, wb_edin_stb, wb_edin_we;
	wire	[27:0]	wb_edin_addr;
	wire	[31:0]	wb_edin_data;
	wire	[3:0]	wb_edin_sel;
	wire		wb_edin_stall, wb_edin_ack, wb_edin_err;
	wire	[31:0]	wb_edin_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb(DIO), component edout
	// Verilator lint_off UNUSED
	wire		wb_edout_cyc, wb_edout_stb, wb_edout_we;
	wire	[27:0]	wb_edout_addr;
	wire	[31:0]	wb_edout_data;
	wire	[3:0]	wb_edout_sel;
	wire		wb_edout_stall, wb_edout_ack, wb_edout_err;
	wire	[31:0]	wb_edout_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb, component flashcfg
	// Verilator lint_off UNUSED
	wire		wb_flashcfg_cyc, wb_flashcfg_stb, wb_flashcfg_we;
	wire	[27:0]	wb_flashcfg_addr;
	wire	[31:0]	wb_flashcfg_data;
	wire	[3:0]	wb_flashcfg_sel;
	wire		wb_flashcfg_stall, wb_flashcfg_ack, wb_flashcfg_err;
	wire	[31:0]	wb_flashcfg_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb, component pmic
	// Verilator lint_off UNUSED
	wire		wb_pmic_cyc, wb_pmic_stb, wb_pmic_we;
	wire	[27:0]	wb_pmic_addr;
	wire	[31:0]	wb_pmic_data;
	wire	[3:0]	wb_pmic_sel;
	wire		wb_pmic_stall, wb_pmic_ack, wb_pmic_err;
	wire	[31:0]	wb_pmic_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb, component scop_edid
	// Verilator lint_off UNUSED
	wire		wb_scop_edid_cyc, wb_scop_edid_stb, wb_scop_edid_we;
	wire	[27:0]	wb_scop_edid_addr;
	wire	[31:0]	wb_scop_edid_data;
	wire	[3:0]	wb_scop_edid_sel;
	wire		wb_scop_edid_stall, wb_scop_edid_ack, wb_scop_edid_err;
	wire	[31:0]	wb_scop_edid_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb, component scope_hdmiin
	// Verilator lint_off UNUSED
	wire		wb_scope_hdmiin_cyc, wb_scope_hdmiin_stb, wb_scope_hdmiin_we;
	wire	[27:0]	wb_scope_hdmiin_addr;
	wire	[31:0]	wb_scope_hdmiin_data;
	wire	[3:0]	wb_scope_hdmiin_sel;
	wire		wb_scope_hdmiin_stall, wb_scope_hdmiin_ack, wb_scope_hdmiin_err;
	wire	[31:0]	wb_scope_hdmiin_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb, component scope_sdcard
	// Verilator lint_off UNUSED
	wire		wb_scope_sdcard_cyc, wb_scope_sdcard_stb, wb_scope_sdcard_we;
	wire	[27:0]	wb_scope_sdcard_addr;
	wire	[31:0]	wb_scope_sdcard_data;
	wire	[3:0]	wb_scope_sdcard_sel;
	wire		wb_scope_sdcard_stall, wb_scope_sdcard_ack, wb_scope_sdcard_err;
	wire	[31:0]	wb_scope_sdcard_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb, component gpsu
	// Verilator lint_off UNUSED
	wire		wb_gpsu_cyc, wb_gpsu_stb, wb_gpsu_we;
	wire	[27:0]	wb_gpsu_addr;
	wire	[31:0]	wb_gpsu_data;
	wire	[3:0]	wb_gpsu_sel;
	wire		wb_gpsu_stall, wb_gpsu_ack, wb_gpsu_err;
	wire	[31:0]	wb_gpsu_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb, component sdcard
	// Verilator lint_off UNUSED
	wire		wb_sdcard_cyc, wb_sdcard_stb, wb_sdcard_we;
	wire	[27:0]	wb_sdcard_addr;
	wire	[31:0]	wb_sdcard_data;
	wire	[3:0]	wb_sdcard_sel;
	wire		wb_sdcard_stall, wb_sdcard_ack, wb_sdcard_err;
	wire	[31:0]	wb_sdcard_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb, component cfg
	// Verilator lint_off UNUSED
	wire		wb_cfg_cyc, wb_cfg_stb, wb_cfg_we;
	wire	[27:0]	wb_cfg_addr;
	wire	[31:0]	wb_cfg_data;
	wire	[3:0]	wb_cfg_sel;
	wire		wb_cfg_stall, wb_cfg_ack, wb_cfg_err;
	wire	[31:0]	wb_cfg_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb, component mdio
	// Verilator lint_off UNUSED
	wire		wb_mdio_cyc, wb_mdio_stb, wb_mdio_we;
	wire	[27:0]	wb_mdio_addr;
	wire	[31:0]	wb_mdio_data;
	wire	[3:0]	wb_mdio_sel;
	wire		wb_mdio_stall, wb_mdio_ack, wb_mdio_err;
	wire	[31:0]	wb_mdio_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb, component wb_dio
	// Verilator lint_off UNUSED
	wire		wb_dio_cyc, wb_dio_stb, wb_dio_we;
	wire	[27:0]	wb_dio_addr;
	wire	[31:0]	wb_dio_data;
	wire	[3:0]	wb_dio_sel;
	wire		wb_dio_stall, wb_dio_ack, wb_dio_err;
	wire	[31:0]	wb_dio_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb, component bkram
	// Verilator lint_off UNUSED
	wire		wb_bkram_cyc, wb_bkram_stb, wb_bkram_we;
	wire	[27:0]	wb_bkram_addr;
	wire	[31:0]	wb_bkram_data;
	wire	[3:0]	wb_bkram_sel;
	wire		wb_bkram_stall, wb_bkram_ack, wb_bkram_err;
	wire	[31:0]	wb_bkram_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb, component flash
	// Verilator lint_off UNUSED
	wire		wb_flash_cyc, wb_flash_stb, wb_flash_we;
	wire	[27:0]	wb_flash_addr;
	wire	[31:0]	wb_flash_data;
	wire	[3:0]	wb_flash_sel;
	wire		wb_flash_stall, wb_flash_ack, wb_flash_err;
	wire	[31:0]	wb_flash_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb, component xpand
	// Verilator lint_off UNUSED
	wire		wb_xpand_cyc, wb_xpand_stb, wb_xpand_we;
	wire	[27:0]	wb_xpand_addr;
	wire	[31:0]	wb_xpand_data;
	wire	[3:0]	wb_xpand_sel;
	wire		wb_xpand_stall, wb_xpand_ack, wb_xpand_err, xpand_err;
	assign		wb_xpand_err = xpand_err;
	wire	[31:0]	wb_xpand_idata;
	// Verilator lint_on UNUSED
	// Bus wbu
	// Wishbone definitions for bus wbu, component wbu
	// Verilator lint_off UNUSED
	wire		wbu_wbu_cyc, wbu_wbu_stb, wbu_wbu_we;
	wire	[28:0]	wbu_wbu_addr;
	wire	[31:0]	wbu_wbu_data;
	wire	[3:0]	wbu_wbu_sel;
	wire		wbu_wbu_stall, wbu_wbu_ack, wbu_wbu_err;
	wire	[31:0]	wbu_wbu_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wbu, component wbu_dwb
	// Verilator lint_off UNUSED
	wire		wbu_wbu_dwb_cyc, wbu_wbu_dwb_stb, wbu_wbu_dwb_we;
	wire	[28:0]	wbu_wbu_dwb_addr;
	wire	[31:0]	wbu_wbu_dwb_data;
	wire	[3:0]	wbu_wbu_dwb_sel;
	wire		wbu_wbu_dwb_stall, wbu_wbu_dwb_ack, wbu_wbu_dwb_err, wbu_dwb_err;
	assign		wbu_wbu_dwb_err = wbu_dwb_err;
	wire	[31:0]	wbu_wbu_dwb_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wbu, component zip_dbg
	// Verilator lint_off UNUSED
	wire		wbu_zip_dbg_cyc, wbu_zip_dbg_stb, wbu_zip_dbg_we;
	wire	[28:0]	wbu_zip_dbg_addr;
	wire	[31:0]	wbu_zip_dbg_data;
	wire	[3:0]	wbu_zip_dbg_sel;
	wire		wbu_zip_dbg_stall, wbu_zip_dbg_ack, wbu_zip_dbg_err;
	wire	[31:0]	wbu_zip_dbg_idata;
	// Verilator lint_on UNUSED
	// Bus xpand_bus
	// Wishbone definitions for bus xpand_bus, component xpand
	// Verilator lint_off UNUSED
	wire		xpand_bus_xpand_cyc, xpand_bus_xpand_stb, xpand_bus_xpand_we;
	wire	[24:0]	xpand_bus_xpand_addr;
	wire	[127:0]	xpand_bus_xpand_data;
	wire	[15:0]	xpand_bus_xpand_sel;
	wire		xpand_bus_xpand_stall, xpand_bus_xpand_ack, xpand_bus_xpand_err;
	wire	[127:0]	xpand_bus_xpand_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus xpand_bus, component sdram_arbiter
	// Verilator lint_off UNUSED
	wire		xpand_bus_sdram_arbiter_cyc, xpand_bus_sdram_arbiter_stb, xpand_bus_sdram_arbiter_we;
	wire	[24:0]	xpand_bus_sdram_arbiter_addr;
	wire	[127:0]	xpand_bus_sdram_arbiter_data;
	wire	[15:0]	xpand_bus_sdram_arbiter_sel;
	wire		xpand_bus_sdram_arbiter_stall, xpand_bus_sdram_arbiter_ack, xpand_bus_sdram_arbiter_err, sdram_arbiter_err;
	assign		xpand_bus_sdram_arbiter_err = sdram_arbiter_err;
	wire	[127:0]	xpand_bus_sdram_arbiter_idata;
	// Verilator lint_on UNUSED
	// Bus vid
	// Wishbone definitions for bus vid, component hdmiin
	// Verilator lint_off UNUSED
	wire		vid_hdmiin_cyc, vid_hdmiin_stb, vid_hdmiin_we;
	wire	[24:0]	vid_hdmiin_addr;
	wire	[127:0]	vid_hdmiin_data;
	wire	[15:0]	vid_hdmiin_sel;
	wire		vid_hdmiin_stall, vid_hdmiin_ack, vid_hdmiin_err;
	wire	[127:0]	vid_hdmiin_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus vid, component vid_bus
	// Verilator lint_off UNUSED
	wire		vid_vid_bus_cyc, vid_vid_bus_stb, vid_vid_bus_we;
	wire	[24:0]	vid_vid_bus_addr;
	wire	[127:0]	vid_vid_bus_data;
	wire	[15:0]	vid_vid_bus_sel;
	wire		vid_vid_bus_stall, vid_vid_bus_ack, vid_vid_bus_err, vid_bus_err;
	assign		vid_vid_bus_err = vid_bus_err;
	wire	[127:0]	vid_vid_bus_idata;
	// Verilator lint_on UNUSED
	// Bus zip
	// Wishbone definitions for bus zip, component zip
	// Verilator lint_off UNUSED
	wire		zip_zip_cyc, zip_zip_stb, zip_zip_we;
	wire	[27:0]	zip_zip_addr;
	wire	[31:0]	zip_zip_data;
	wire	[3:0]	zip_zip_sel;
	wire		zip_zip_stall, zip_zip_ack, zip_zip_err;
	wire	[31:0]	zip_zip_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus zip, component zip_dwb
	// Verilator lint_off UNUSED
	wire		zip_zip_dwb_cyc, zip_zip_dwb_stb, zip_zip_dwb_we;
	wire	[27:0]	zip_zip_dwb_addr;
	wire	[31:0]	zip_zip_dwb_data;
	wire	[3:0]	zip_zip_dwb_sel;
	wire		zip_zip_dwb_stall, zip_zip_dwb_ack, zip_zip_dwb_err, zip_dwb_err;
	assign		zip_zip_dwb_err = zip_dwb_err;
	wire	[31:0]	zip_zip_dwb_idata;
	// Verilator lint_on UNUSED
	// Bus sdr
	// Wishbone definitions for bus sdr, component vid_bus
	// Verilator lint_off UNUSED
	wire		sdr_vid_bus_cyc, sdr_vid_bus_stb, sdr_vid_bus_we;
	wire	[24:0]	sdr_vid_bus_addr;
	wire	[127:0]	sdr_vid_bus_data;
	wire	[15:0]	sdr_vid_bus_sel;
	wire		sdr_vid_bus_stall, sdr_vid_bus_ack, sdr_vid_bus_err;
	wire	[127:0]	sdr_vid_bus_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus sdr, component sdram_arbiter
	// Verilator lint_off UNUSED
	wire		sdr_sdram_arbiter_cyc, sdr_sdram_arbiter_stb, sdr_sdram_arbiter_we;
	wire	[24:0]	sdr_sdram_arbiter_addr;
	wire	[127:0]	sdr_sdram_arbiter_data;
	wire	[15:0]	sdr_sdram_arbiter_sel;
	wire		sdr_sdram_arbiter_stall, sdr_sdram_arbiter_ack, sdr_sdram_arbiter_err;
	wire	[127:0]	sdr_sdram_arbiter_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus sdr, component sdram
	// Verilator lint_off UNUSED
	wire		sdr_sdram_cyc, sdr_sdram_stb, sdr_sdram_we;
	wire	[24:0]	sdr_sdram_addr;
	wire	[127:0]	sdr_sdram_data;
	wire	[15:0]	sdr_sdram_sel;
	wire		sdr_sdram_stall, sdr_sdram_ack, sdr_sdram_err, sdram_err;
	assign		sdr_sdram_err = sdram_err;
	wire	[127:0]	sdr_sdram_idata;
	// Verilator lint_on UNUSED

	//
	// Peripheral address decoding
	//
	//
	// BUS-LOGIC for wb
	//
	//
	// wb Bus logic to handle SINGLE slaves
	//
	reg		r_wb_sio_ack;
	reg	[31:0]	r_wb_sio_data;

	assign	wb_sio_stall = 1'b0;

	initial r_wb_sio_ack = 1'b0;
	always	@(posedge i_clk)
		r_wb_sio_ack <= (wb_sio_stb);
	assign	wb_sio_ack = r_wb_sio_ack;

	always	@(posedge i_clk)
	casez( wb_sio_addr[3:0] )
		4'h0: r_wb_sio_data <= wb_buildtime_idata;
		4'h1: r_wb_sio_data <= wb_buserr_idata;
		4'h2: r_wb_sio_data <= wb_buspic_idata;
		4'h3: r_wb_sio_data <= wb_clkhdmiin_idata;
		4'h4: r_wb_sio_data <= wb_clkhdmiout_idata;
		4'h5: r_wb_sio_data <= wb_gpio_idata;
		4'h6: r_wb_sio_data <= wb_hdmi_scope_frame_offset_idata;
		4'h7: r_wb_sio_data <= wb_pwrcount_idata;
		4'h8: r_wb_sio_data <= wb_rtcdate_idata;
		4'h9: r_wb_sio_data <= wb_spio_idata;
		4'ha: r_wb_sio_data <= wb_subseconds_idata;
		4'hb: r_wb_sio_data <= wb_sysclk_idata;
		4'hc: r_wb_sio_data <= wb_version_idata;
		default: r_wb_sio_data <= wb_version_idata;
	endcase
	assign	wb_sio_idata = r_wb_sio_data;


	//
	// Now to translate this logic to the various SIO slaves
	//
	// In this case, the SIO bus has the prefix wb_sio
	// and all of the slaves have various wires beginning
	// with their own respective bus prefixes.
	// Our goal here is to make certain that all of
	// the slave bus inputs match the SIO bus wires
	assign	wb_buildtime_cyc = wb_sio_cyc;
	assign	wb_buildtime_stb = wb_sio_stb && (wb_sio_addr[ 3: 0] ==  4'h0);  // 0x0000000
	assign	wb_buildtime_we  = wb_sio_we;
	assign	wb_buildtime_data= wb_sio_data;
	assign	wb_buildtime_sel = wb_sio_sel;
	assign	wb_buserr_cyc = wb_sio_cyc;
	assign	wb_buserr_stb = wb_sio_stb && (wb_sio_addr[ 3: 0] ==  4'h1);  // 0x0000004
	assign	wb_buserr_we  = wb_sio_we;
	assign	wb_buserr_data= wb_sio_data;
	assign	wb_buserr_sel = wb_sio_sel;
	assign	wb_buspic_cyc = wb_sio_cyc;
	assign	wb_buspic_stb = wb_sio_stb && (wb_sio_addr[ 3: 0] ==  4'h2);  // 0x0000008
	assign	wb_buspic_we  = wb_sio_we;
	assign	wb_buspic_data= wb_sio_data;
	assign	wb_buspic_sel = wb_sio_sel;
	assign	wb_clkhdmiin_cyc = wb_sio_cyc;
	assign	wb_clkhdmiin_stb = wb_sio_stb && (wb_sio_addr[ 3: 0] ==  4'h3);  // 0x000000c
	assign	wb_clkhdmiin_we  = wb_sio_we;
	assign	wb_clkhdmiin_data= wb_sio_data;
	assign	wb_clkhdmiin_sel = wb_sio_sel;
	assign	wb_clkhdmiout_cyc = wb_sio_cyc;
	assign	wb_clkhdmiout_stb = wb_sio_stb && (wb_sio_addr[ 3: 0] ==  4'h4);  // 0x0000010
	assign	wb_clkhdmiout_we  = wb_sio_we;
	assign	wb_clkhdmiout_data= wb_sio_data;
	assign	wb_clkhdmiout_sel = wb_sio_sel;
	assign	wb_gpio_cyc = wb_sio_cyc;
	assign	wb_gpio_stb = wb_sio_stb && (wb_sio_addr[ 3: 0] ==  4'h5);  // 0x0000014
	assign	wb_gpio_we  = wb_sio_we;
	assign	wb_gpio_data= wb_sio_data;
	assign	wb_gpio_sel = wb_sio_sel;
	assign	wb_hdmi_scope_frame_offset_cyc = wb_sio_cyc;
	assign	wb_hdmi_scope_frame_offset_stb = wb_sio_stb && (wb_sio_addr[ 3: 0] ==  4'h6);  // 0x0000018
	assign	wb_hdmi_scope_frame_offset_we  = wb_sio_we;
	assign	wb_hdmi_scope_frame_offset_data= wb_sio_data;
	assign	wb_hdmi_scope_frame_offset_sel = wb_sio_sel;
	assign	wb_pwrcount_cyc = wb_sio_cyc;
	assign	wb_pwrcount_stb = wb_sio_stb && (wb_sio_addr[ 3: 0] ==  4'h7);  // 0x000001c
	assign	wb_pwrcount_we  = wb_sio_we;
	assign	wb_pwrcount_data= wb_sio_data;
	assign	wb_pwrcount_sel = wb_sio_sel;
	assign	wb_rtcdate_cyc = wb_sio_cyc;
	assign	wb_rtcdate_stb = wb_sio_stb && (wb_sio_addr[ 3: 0] ==  4'h8);  // 0x0000020
	assign	wb_rtcdate_we  = wb_sio_we;
	assign	wb_rtcdate_data= wb_sio_data;
	assign	wb_rtcdate_sel = wb_sio_sel;
	assign	wb_spio_cyc = wb_sio_cyc;
	assign	wb_spio_stb = wb_sio_stb && (wb_sio_addr[ 3: 0] ==  4'h9);  // 0x0000024
	assign	wb_spio_we  = wb_sio_we;
	assign	wb_spio_data= wb_sio_data;
	assign	wb_spio_sel = wb_sio_sel;
	assign	wb_subseconds_cyc = wb_sio_cyc;
	assign	wb_subseconds_stb = wb_sio_stb && (wb_sio_addr[ 3: 0] ==  4'ha);  // 0x0000028
	assign	wb_subseconds_we  = wb_sio_we;
	assign	wb_subseconds_data= wb_sio_data;
	assign	wb_subseconds_sel = wb_sio_sel;
	assign	wb_sysclk_cyc = wb_sio_cyc;
	assign	wb_sysclk_stb = wb_sio_stb && (wb_sio_addr[ 3: 0] ==  4'hb);  // 0x000002c
	assign	wb_sysclk_we  = wb_sio_we;
	assign	wb_sysclk_data= wb_sio_data;
	assign	wb_sysclk_sel = wb_sio_sel;
	assign	wb_version_cyc = wb_sio_cyc;
	assign	wb_version_stb = wb_sio_stb && (wb_sio_addr[ 3: 0] ==  4'hc);  // 0x0000030
	assign	wb_version_we  = wb_sio_we;
	assign	wb_version_data= wb_sio_data;
	assign	wb_version_sel = wb_sio_sel;
	//
	// wb Bus logic to handle 9 DOUBLE slaves
	//
	//
	reg	[1:0]	r_wb_dio_ack;
	// # dlist = 9, nextlg(#dlist) = 4
	reg	[3:0]	r_wb_dio_bus_select;
	reg	[31:0]	r_wb_dio_data;

	// DOUBLE peripherals are not allowed to stall.
	assign	wb_dio_stall = 1'b0;

	// DOUBLE peripherals return their acknowledgments in two
	// clocks--always, allowing us to collect this logic together
	// in a slave independent manner.  Here, the acknowledgment
	// is treated as a two stage shift register, cleared on any
	// reset, or any time the cycle line drops.  (Dropping the
	// cycle line aborts the transaction.)
	initial	r_wb_dio_ack = 0;
	always	@(posedge i_clk)
	if (i_reset || !wb_dio_cyc)
		r_wb_dio_ack <= 0;
	else
		r_wb_dio_ack <= { r_wb_dio_ack[0], (wb_dio_stb) };
	assign	wb_dio_ack = r_wb_dio_ack[1];

	// Since it costs us two clocks to go through this
	// logic, we'll take one of those clocks here to set
	// a selection index, and then on the next clock we'll
	// use this index to select from among the vaious
	// possible bus return values
	always @(posedge i_clk)
	casez(wb_dio_addr[7:2])
	6'b00_0000: r_wb_dio_bus_select <= 4'd0;
	6'b00_0001: r_wb_dio_bus_select <= 4'd1;
	6'b00_0010: r_wb_dio_bus_select <= 4'd2;
	6'b00_0011: r_wb_dio_bus_select <= 4'd3;
	6'b00_010?: r_wb_dio_bus_select <= 4'd4;
	6'b00_10??: r_wb_dio_bus_select <= 4'd5;
	6'b00_11??: r_wb_dio_bus_select <= 4'd6;
	6'b01_????: r_wb_dio_bus_select <= 4'd7;
	6'b1?_????: r_wb_dio_bus_select <= 4'd8;
	default: r_wb_dio_bus_select <= 0;
	endcase

	always	@(posedge i_clk)
	casez(r_wb_dio_bus_select)
	4'd0: r_wb_dio_data <= wb_gck_idata;
	4'd1: r_wb_dio_data <= wb_mous_idata;
	4'd2: r_wb_dio_data <= wb_oled_idata;
	4'd3: r_wb_dio_data <= wb_rtc_idata;
	4'd4: r_wb_dio_data <= wb_gtb_idata;
	4'd5: r_wb_dio_data <= wb_hdmiin_idata;
	4'd6: r_wb_dio_data <= wb_sio_idata;
	4'd7: r_wb_dio_data <= wb_edin_idata;
	4'd8: r_wb_dio_data <= wb_edout_idata;
	default: r_wb_dio_data <= wb_edout_idata;
	endcase

	assign	wb_dio_idata = r_wb_dio_data;

	assign	wb_gck_cyc = wb_dio_cyc;
	assign	wb_gck_stb = wb_dio_stb && ((wb_dio_addr[ 7: 2] &  6'h3f) ==  6'h00);  // 0x0000000 - 0x000000f
	assign	wb_gck_we  = wb_dio_we;
	assign	wb_gck_addr= wb_dio_addr;
	assign	wb_gck_data= wb_dio_data;
	assign	wb_gck_sel = wb_dio_sel;
	assign	wb_mous_cyc = wb_dio_cyc;
	assign	wb_mous_stb = wb_dio_stb && ((wb_dio_addr[ 7: 2] &  6'h3f) ==  6'h01);  // 0x0000010 - 0x000001f
	assign	wb_mous_we  = wb_dio_we;
	assign	wb_mous_addr= wb_dio_addr;
	assign	wb_mous_data= wb_dio_data;
	assign	wb_mous_sel = wb_dio_sel;
	assign	wb_oled_cyc = wb_dio_cyc;
	assign	wb_oled_stb = wb_dio_stb && ((wb_dio_addr[ 7: 2] &  6'h3f) ==  6'h02);  // 0x0000020 - 0x000002f
	assign	wb_oled_we  = wb_dio_we;
	assign	wb_oled_addr= wb_dio_addr;
	assign	wb_oled_data= wb_dio_data;
	assign	wb_oled_sel = wb_dio_sel;
	assign	wb_rtc_cyc = wb_dio_cyc;
	assign	wb_rtc_stb = wb_dio_stb && ((wb_dio_addr[ 7: 2] &  6'h3f) ==  6'h03);  // 0x0000030 - 0x000003f
	assign	wb_rtc_we  = wb_dio_we;
	assign	wb_rtc_addr= wb_dio_addr;
	assign	wb_rtc_data= wb_dio_data;
	assign	wb_rtc_sel = wb_dio_sel;
	assign	wb_gtb_cyc = wb_dio_cyc;
	assign	wb_gtb_stb = wb_dio_stb && ((wb_dio_addr[ 7: 2] &  6'h3e) ==  6'h04);  // 0x0000040 - 0x000005f
	assign	wb_gtb_we  = wb_dio_we;
	assign	wb_gtb_addr= wb_dio_addr;
	assign	wb_gtb_data= wb_dio_data;
	assign	wb_gtb_sel = wb_dio_sel;
	assign	wb_hdmiin_cyc = wb_dio_cyc;
	assign	wb_hdmiin_stb = wb_dio_stb && ((wb_dio_addr[ 7: 2] &  6'h3c) ==  6'h08);  // 0x0000080 - 0x00000bf
	assign	wb_hdmiin_we  = wb_dio_we;
	assign	wb_hdmiin_addr= wb_dio_addr;
	assign	wb_hdmiin_data= wb_dio_data;
	assign	wb_hdmiin_sel = wb_dio_sel;
	assign	wb_sio_cyc = wb_dio_cyc;
	assign	wb_sio_stb = wb_dio_stb && ((wb_dio_addr[ 7: 2] &  6'h3c) ==  6'h0c);  // 0x00000c0 - 0x00000ff
	assign	wb_sio_we  = wb_dio_we;
	assign	wb_sio_addr= wb_dio_addr;
	assign	wb_sio_data= wb_dio_data;
	assign	wb_sio_sel = wb_dio_sel;
	assign	wb_edin_cyc = wb_dio_cyc;
	assign	wb_edin_stb = wb_dio_stb && ((wb_dio_addr[ 7: 2] &  6'h30) ==  6'h10);  // 0x0000100 - 0x00001ff
	assign	wb_edin_we  = wb_dio_we;
	assign	wb_edin_addr= wb_dio_addr;
	assign	wb_edin_data= wb_dio_data;
	assign	wb_edin_sel = wb_dio_sel;
	assign	wb_edout_cyc = wb_dio_cyc;
	assign	wb_edout_stb = wb_dio_stb && ((wb_dio_addr[ 7: 2] &  6'h20) ==  6'h20);  // 0x0000200 - 0x00003ff
	assign	wb_edout_we  = wb_dio_we;
	assign	wb_edout_addr= wb_dio_addr;
	assign	wb_edout_data= wb_dio_data;
	assign	wb_edout_sel = wb_dio_sel;
	assign	wb_flashcfg_err= 1'b0;
	assign	wb_pmic_err= 1'b0;
	assign	wb_scop_edid_err= 1'b0;
	assign	wb_scope_hdmiin_err= 1'b0;
	assign	wb_scope_sdcard_err= 1'b0;
	assign	wb_gpsu_err= 1'b0;
	assign	wb_sdcard_err= 1'b0;
	assign	wb_cfg_err= 1'b0;
	assign	wb_mdio_err= 1'b0;
	assign	wb_dio_err= 1'b0;
	assign	wb_bkram_err= 1'b0;
	assign	wb_flash_err= 1'b0;
	// info: @ERROR.WIRE xpand_err != wb_xpand
	// info: @ERROR.WIRE for xpand, = xpand_err, doesn't match the buses wire wb_xpand_err
	assign	wb_xpand_err = xpand_err;
	//
	// Connect the wb bus components together using the wbxbar()
	//
	//
	wbxbar #(
		.NM(2), .NS(13), .AW(28), .DW(32),
		.SLAVE_ADDR({
			{ 28'h8000000 }, // xpand: 0x20000000
			{ 28'h6000000 }, // flash: 0x18000000
			{ 28'h5800000 }, // bkram: 0x16000000
			{ 28'h5000000 }, // wb_dio: 0x14000000
			{ 28'h4800000 }, //  mdio: 0x12000000
			{ 28'h4000000 }, //   cfg: 0x10000000
			{ 28'h3800000 }, // sdcard: 0x0e000000
			{ 28'h3000000 }, //  gpsu: 0x0c000000
			{ 28'h2800000 }, // scope_sdcard: 0x0a000000
			{ 28'h2000000 }, // scope_hdmiin: 0x08000000
			{ 28'h1800000 }, // scop_edid: 0x06000000
			{ 28'h1000000 }, //  pmic: 0x04000000
			{ 28'h0800000 }  // flashcfg: 0x02000000
		}),
		.SLAVE_MASK({
			{ 28'h8000000 }, // xpand
			{ 28'hf800000 }, // flash
			{ 28'hf800000 }, // bkram
			{ 28'hf800000 }, // wb_dio
			{ 28'hf800000 }, //  mdio
			{ 28'hf800000 }, //   cfg
			{ 28'hf800000 }, // sdcard
			{ 28'hf800000 }, //  gpsu
			{ 28'hf800000 }, // scope_sdcard
			{ 28'hf800000 }, // scope_hdmiin
			{ 28'hf800000 }, // scop_edid
			{ 28'hf800000 }, //  pmic
			{ 28'hf800000 }
		}))
	wb_xbar(
		.i_clk(i_clk), .i_reset(i_reset),
		.i_mcyc({
			wb_zip_dwb_cyc,
			wb_wbu_dwb_cyc
		}),
		.i_mstb({
			wb_zip_dwb_stb,
			wb_wbu_dwb_stb
		}),
		.i_mwe({
			wb_zip_dwb_we,
			wb_wbu_dwb_we
		}),
		.i_maddr({
			wb_zip_dwb_addr,
			wb_wbu_dwb_addr
		}),
		.i_mdata({
			wb_zip_dwb_data,
			wb_wbu_dwb_data
		}),
		.i_msel({
			wb_zip_dwb_sel,
			wb_wbu_dwb_sel
		}),
		.o_mstall({
			wb_zip_dwb_stall,
			wb_wbu_dwb_stall
		}),
		.o_mack({
			wb_zip_dwb_ack,
			wb_wbu_dwb_ack
		}),
		.o_mdata({
			wb_zip_dwb_idata,
			wb_wbu_dwb_idata
		}),
		.o_merr({
			wb_zip_dwb_err,
			wb_wbu_dwb_err
		}),
		// Slave connections
		.o_scyc({
			wb_xpand_cyc,
			wb_flash_cyc,
			wb_bkram_cyc,
			wb_dio_cyc,
			wb_mdio_cyc,
			wb_cfg_cyc,
			wb_sdcard_cyc,
			wb_gpsu_cyc,
			wb_scope_sdcard_cyc,
			wb_scope_hdmiin_cyc,
			wb_scop_edid_cyc,
			wb_pmic_cyc,
			wb_flashcfg_cyc
		}),
		.o_sstb({
			wb_xpand_stb,
			wb_flash_stb,
			wb_bkram_stb,
			wb_dio_stb,
			wb_mdio_stb,
			wb_cfg_stb,
			wb_sdcard_stb,
			wb_gpsu_stb,
			wb_scope_sdcard_stb,
			wb_scope_hdmiin_stb,
			wb_scop_edid_stb,
			wb_pmic_stb,
			wb_flashcfg_stb
		}),
		.o_swe({
			wb_xpand_we,
			wb_flash_we,
			wb_bkram_we,
			wb_dio_we,
			wb_mdio_we,
			wb_cfg_we,
			wb_sdcard_we,
			wb_gpsu_we,
			wb_scope_sdcard_we,
			wb_scope_hdmiin_we,
			wb_scop_edid_we,
			wb_pmic_we,
			wb_flashcfg_we
		}),
		.o_saddr({
			wb_xpand_addr,
			wb_flash_addr,
			wb_bkram_addr,
			wb_dio_addr,
			wb_mdio_addr,
			wb_cfg_addr,
			wb_sdcard_addr,
			wb_gpsu_addr,
			wb_scope_sdcard_addr,
			wb_scope_hdmiin_addr,
			wb_scop_edid_addr,
			wb_pmic_addr,
			wb_flashcfg_addr
		}),
		.o_sdata({
			wb_xpand_data,
			wb_flash_data,
			wb_bkram_data,
			wb_dio_data,
			wb_mdio_data,
			wb_cfg_data,
			wb_sdcard_data,
			wb_gpsu_data,
			wb_scope_sdcard_data,
			wb_scope_hdmiin_data,
			wb_scop_edid_data,
			wb_pmic_data,
			wb_flashcfg_data
		}),
		.o_ssel({
			wb_xpand_sel,
			wb_flash_sel,
			wb_bkram_sel,
			wb_dio_sel,
			wb_mdio_sel,
			wb_cfg_sel,
			wb_sdcard_sel,
			wb_gpsu_sel,
			wb_scope_sdcard_sel,
			wb_scope_hdmiin_sel,
			wb_scop_edid_sel,
			wb_pmic_sel,
			wb_flashcfg_sel
		}),
		.i_sstall({
			wb_xpand_stall,
			wb_flash_stall,
			wb_bkram_stall,
			wb_dio_stall,
			wb_mdio_stall,
			wb_cfg_stall,
			wb_sdcard_stall,
			wb_gpsu_stall,
			wb_scope_sdcard_stall,
			wb_scope_hdmiin_stall,
			wb_scop_edid_stall,
			wb_pmic_stall,
			wb_flashcfg_stall
		}),
		.i_sack({
			wb_xpand_ack,
			wb_flash_ack,
			wb_bkram_ack,
			wb_dio_ack,
			wb_mdio_ack,
			wb_cfg_ack,
			wb_sdcard_ack,
			wb_gpsu_ack,
			wb_scope_sdcard_ack,
			wb_scope_hdmiin_ack,
			wb_scop_edid_ack,
			wb_pmic_ack,
			wb_flashcfg_ack
		}),
		.i_sdata({
			wb_xpand_idata,
			wb_flash_idata,
			wb_bkram_idata,
			wb_dio_idata,
			wb_mdio_idata,
			wb_cfg_idata,
			wb_sdcard_idata,
			wb_gpsu_idata,
			wb_scope_sdcard_idata,
			wb_scope_hdmiin_idata,
			wb_scop_edid_idata,
			wb_pmic_idata,
			wb_flashcfg_idata
		}),
		.i_serr({
			wb_xpand_err,
			wb_flash_err,
			wb_bkram_err,
			wb_dio_err,
			wb_mdio_err,
			wb_cfg_err,
			wb_sdcard_err,
			wb_gpsu_err,
			wb_scope_sdcard_err,
			wb_scope_hdmiin_err,
			wb_scop_edid_err,
			wb_pmic_err,
			wb_flashcfg_err
		})
		);

	//
	// BUS-LOGIC for wbu
	//
	//
	// No class SINGLE peripherals on the "wbu" bus
	//

	//
	// No class DOUBLE peripherals on the "wbu" bus
	//

	// info: @ERROR.WIRE wbu_dwb_err != wbu_wbu_dwb
	// info: @ERROR.WIRE for wbu_dwb, = wbu_dwb_err, doesn't match the buses wire wbu_wbu_dwb_err
	assign	wbu_wbu_dwb_err = wbu_dwb_err;
	assign	wbu_zip_dbg_err= 1'b0;
	//
	// Connect the wbu bus components together using the wbxbar()
	//
	//
	wbxbar #(
		.NM(1), .NS(2), .AW(29), .DW(32),
		.SLAVE_ADDR({
			{ 29'h10000000 }, // zip_dbg: 0x40000000
			{ 29'h00000000 }  // wbu_dwb: 0x00000000
		}),
		.SLAVE_MASK({
			{ 29'h18000000 }, // zip_dbg
			{ 29'h10000000 }
		}))
	wbu_xbar(
		.i_clk(i_clk), .i_reset(i_reset),
		.i_mcyc({
			wbu_wbu_cyc
		}),
		.i_mstb({
			wbu_wbu_stb
		}),
		.i_mwe({
			wbu_wbu_we
		}),
		.i_maddr({
			wbu_wbu_addr
		}),
		.i_mdata({
			wbu_wbu_data
		}),
		.i_msel({
			wbu_wbu_sel
		}),
		.o_mstall({
			wbu_wbu_stall
		}),
		.o_mack({
			wbu_wbu_ack
		}),
		.o_mdata({
			wbu_wbu_idata
		}),
		.o_merr({
			wbu_wbu_err
		}),
		// Slave connections
		.o_scyc({
			wbu_zip_dbg_cyc,
			wbu_wbu_dwb_cyc
		}),
		.o_sstb({
			wbu_zip_dbg_stb,
			wbu_wbu_dwb_stb
		}),
		.o_swe({
			wbu_zip_dbg_we,
			wbu_wbu_dwb_we
		}),
		.o_saddr({
			wbu_zip_dbg_addr,
			wbu_wbu_dwb_addr
		}),
		.o_sdata({
			wbu_zip_dbg_data,
			wbu_wbu_dwb_data
		}),
		.o_ssel({
			wbu_zip_dbg_sel,
			wbu_wbu_dwb_sel
		}),
		.i_sstall({
			wbu_zip_dbg_stall,
			wbu_wbu_dwb_stall
		}),
		.i_sack({
			wbu_zip_dbg_ack,
			wbu_wbu_dwb_ack
		}),
		.i_sdata({
			wbu_zip_dbg_idata,
			wbu_wbu_dwb_idata
		}),
		.i_serr({
			wbu_zip_dbg_err,
			wbu_wbu_dwb_err
		})
		);

	//
	// BUS-LOGIC for xpand_bus
	//
//
// Bus xpand_bus has only one master (xpand_bus_xpand) and one slave (xpand_bus_sdram_arbiter)
// connected to it -- skipping the interconnect
//
	assign	xpand_bus_sdram_arbiter_err = sdram_arbiter_err;
	assign	xpand_bus_xpand_err = xpand_bus_sdram_arbiter_err;
	assign	xpand_bus_xpand_stall = xpand_bus_sdram_arbiter_stall;
	assign	xpand_bus_xpand_ack   = xpand_bus_sdram_arbiter_ack;
	assign	xpand_bus_xpand_idata = xpand_bus_sdram_arbiter_data;
	//
	// BUS-LOGIC for vid
	//
//
// Bus vid has only one master (vid_hdmiin) and one slave (vid_vid_bus)
// connected to it -- skipping the interconnect
//
	assign	vid_vid_bus_err = vid_bus_err;
	assign	vid_hdmiin_err = vid_vid_bus_err;
	assign	vid_hdmiin_stall = vid_vid_bus_stall;
	assign	vid_hdmiin_ack   = vid_vid_bus_ack;
	assign	vid_hdmiin_idata = vid_vid_bus_data;
	//
	// BUS-LOGIC for zip
	//
//
// Bus zip has only one master (zip_zip) and one slave (zip_zip_dwb)
// connected to it -- skipping the interconnect
//
	assign	zip_zip_dwb_err = zip_dwb_err;
	assign	zip_zip_err = zip_zip_dwb_err;
	assign	zip_zip_stall = zip_zip_dwb_stall;
	assign	zip_zip_ack   = zip_zip_dwb_ack;
	assign	zip_zip_idata = zip_zip_dwb_data;
	//
	// BUS-LOGIC for sdr
	//
	//
	// No class SINGLE peripherals on the "sdr" bus
	//

	//
	// No class DOUBLE peripherals on the "sdr" bus
	//

	// info: @ERROR.WIRE sdram_err != sdr_sdram
	// info: @ERROR.WIRE for sdram, = sdram_err, doesn't match the buses wire sdr_sdram_err
	assign	sdr_sdram_err = sdram_err;
	//
	// Connect the sdr bus components together using the wbxbar()
	//
	//
	wbxbar #(
		.NM(2), .NS(1), .AW(25), .DW(128),
		.SLAVE_ADDR({
			{ 25'h0000000 }  // sdram: 0x00000000
		}),
		.SLAVE_MASK({
			{ 25'h0000000 }
		}))
	sdr_xbar(
		.i_clk(i_clk), .i_reset(i_reset),
		.i_mcyc({
			sdr_sdram_arbiter_cyc,
			sdr_vid_bus_cyc
		}),
		.i_mstb({
			sdr_sdram_arbiter_stb,
			sdr_vid_bus_stb
		}),
		.i_mwe({
			sdr_sdram_arbiter_we,
			sdr_vid_bus_we
		}),
		.i_maddr({
			sdr_sdram_arbiter_addr,
			sdr_vid_bus_addr
		}),
		.i_mdata({
			sdr_sdram_arbiter_data,
			sdr_vid_bus_data
		}),
		.i_msel({
			sdr_sdram_arbiter_sel,
			sdr_vid_bus_sel
		}),
		.o_mstall({
			sdr_sdram_arbiter_stall,
			sdr_vid_bus_stall
		}),
		.o_mack({
			sdr_sdram_arbiter_ack,
			sdr_vid_bus_ack
		}),
		.o_mdata({
			sdr_sdram_arbiter_idata,
			sdr_vid_bus_idata
		}),
		.o_merr({
			sdr_sdram_arbiter_err,
			sdr_vid_bus_err
		}),
		// Slave connections
		.o_scyc({
			sdr_sdram_cyc
		}),
		.o_sstb({
			sdr_sdram_stb
		}),
		.o_swe({
			sdr_sdram_we
		}),
		.o_saddr({
			sdr_sdram_addr
		}),
		.o_sdata({
			sdr_sdram_data
		}),
		.o_ssel({
			sdr_sdram_sel
		}),
		.i_sstall({
			sdr_sdram_stall
		}),
		.i_sack({
			sdr_sdram_ack
		}),
		.i_sdata({
			sdr_sdram_idata
		}),
		.i_serr({
			sdr_sdram_err
		})
		);

	//
	// Declare the interrupt busses
	//
	// Interrupt busses are defined by anything with a @PIC tag.
	// The @PIC.BUS tag defines the name of the wire bus below,
	// while the @PIC.MAX tag determines the size of the bus width.
	//
	// For your peripheral to be assigned to this bus, it must have an
	// @INT.NAME.WIRE= tag to define the wire name of the interrupt line,
	// and an @INT.NAME.PIC= tag matching the @PIC.BUS tag of the bus
	// your interrupt will be assigned to.  If an @INT.NAME.ID tag also
	// exists, then your interrupt will be assigned to the position given
	// by the ID# in that tag.
	//
	assign	sys_int_vector = {
		1'b0,
		1'b0,
		1'b0,
		sdcard_int,
		mous_interrupt,
		ck_pps2,
		oled_int,
		pmic_int,
		w_bus_int,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0
	};
	assign	alt_int_vector = {
		gpsutxf_int,
		gpsurxf_int,
		gpsutx_int,
		gpsurx_int,
		edid_out_int,
		gpio_int,
		rtc_int,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0
	};
	assign	bus_int_vector = {
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		sdcard_int,
		mous_interrupt,
		scop_hdmiin_int,
		spio_int,
		scop_edid_int
	};


	//
	//
	// Now we turn to defining all of the parts and pieces of what
	// each of the various peripherals does, and what logic it needs.
	//
	// This information comes from the @MAIN.INSERT and @MAIN.ALT tags.
	// If an @ACCESS tag is available, an ifdef is created to handle
	// having the access and not.  If the @ACCESS tag is `defined above
	// then the @MAIN.INSERT code is executed.  If not, the @MAIN.ALT
	// code is exeucted, together with any other cleanup settings that
	// might need to take place--such as returning zeros to the bus,
	// or making sure all of the various interrupt wires are set to
	// zero if the component is not included.
	//
`ifdef	RTC_ACCESS
`ifdef	GPSTRK_ACCESS
	rtcgps	#(RTC_CLKSTEP) thertc(i_clk, i_reset,
		wb_cyc, (wb_stb)&&(rtc_sel), wb_we, wb_addr[1:0], wb_data, wb_sel,
		rtc_ack, rtc_stall, rtc_data,
		rtc_int, rtc_ppd,
		gps_tracking, ck_pps, gps_step[47:16], rtc_pps);
`else
	rtclight #(32'h2af31d) thertc(i_clk, i_reset,
		wb_cyc, (wb_stb)&&(rtc_sel), wb_we, { 1'b0, wb_addr[1:0] },
			wb_data, wb_sel,
		rtc_stall, rtc_ack, rtc_data,
		rtc_int, rtc_ppd);
`endif
`else	// RTC_ACCESS
`ifdef	GPSTRK_ACCESS
	assign	rtc_pps = 1'b0;
`endif
	assign	rtc_ppd = 1'b0;
	assign	rtc_int = 1'b0;	// rtc.INT.RTC.WIRE
`endif	// RTC_ACCESS

	assign	version_data = `DATESTAMP;
	assign	version_ack = wb_stb && version_sel;
	assign	version_stall = 1'b0;
`ifdef	MICROPHONE_ACCESS
	wbmic #(.DEFAULT_RELOAD(2083))
 		microphone(i_clk, 1'b0,
 			wb_cyc, (wb_stb)&&(pmic_sel), wb_we,
				wb_addr[0], wb_data,
 			pmic_ack, pmic_stall, pmic_data,
			o_mic_csn, o_mic_sck, i_mic_din, pmic_int);
`else	// MICROPHONE_ACCESS
	assign	o_mic_csn    = 1'b1;
	assign	o_mic_sck    = 1'b1;

	//
	// In the case that there is no pmic peripheral
	// responding on the wb bus
	assign	pmic_ack   = 1'b0;
	assign	pmic_err   = (pmic_stb);
	assign	pmic_stall = 0;
	assign	pmic_data  = 0;

	assign	pmic_int = 1'b0;	// pmic.INT.MIC.WIRE
`endif	// MICROPHONE_ACCESS

`ifdef	GPIO_ACCESS
	//
	// GPIO
	//
	// This interface should allow us to control up to 16 GPIO inputs, and
	// another 16 GPIO outputs.  The interrupt trips when any of the inputs
	// changes.  (Sorry, which input isn't (yet) selectable.)
	//
	localparam	INITIAL_GPIO = 16'h0f;
	wbgpio	#(NGPI, NGPO, INITIAL_GPIO)
		gpioi(i_clk, 1'b1, (wb_stb)&&(gpio_sel), wb_we,
			wb_data, gpio_data, i_gpio, o_gpio,
			gpio_int);
`else	// GPIO_ACCESS
	assign	gpio_int = 1'b0;	// gpio.INT.GPIO.WIRE
`endif	// GPIO_ACCESS

	clkcounter clksysclkctr(i_clk, ck_pps, i_clk, sysclk_data);
	always @(posedge i_clk)
		r_sysclk_ack <= (wb_stb)&&(sysclk_sel);
	assign	sysclk_ack   = r_sysclk_ack;
	assign	sysclk_stall = 1'b0;
	assign	o_hdmi_out_r = hdmi_in_r;
	assign	o_hdmi_out_g = hdmi_in_g;
	assign	o_hdmi_out_b = hdmi_in_b;

`ifdef	HDMI_OUT_EDID_ACCESS
	wbi2cmaster	#(.READ_ONLY(1'b1),.MEM_ADDR_BITS(8)) the_edout(i_clk,
		wb_cyc, (wb_stb)&&(edout_sel), wb_we, wb_addr[6:0], wb_data,
			wb_sel, edout_ack, edout_stall, edout_data,
		i_hdmi_out_scl, i_hdmi_out_sda, o_hdmi_out_scl, o_hdmi_out_sda,
		edid_out_int,
		edido_dbg);
`else	// HDMI_OUT_EDID_ACCESS
	assign	o_hdmi_out_scl = 1'b1;
	assign	o_hdmi_out_sda = 1'b1;
	assign	edid_out_int = 1'b0;	// edout.INT.EDID.WIRE
`endif	// HDMI_OUT_EDID_ACCESS

	assign	edid_scope_trigger = edido_dbg[31];
	assign	edid_scope_data    = edido_dbg[30:0];
	wbscopc	#(.LGMEM(5'hb), .MAX_STEP(31'h10000)) theicscop(i_clk, 1'b1,
			edid_scope_trigger, edid_scope_data,
			i_clk, wb_cyc, (wb_stb)&&(scop_edid_sel), wb_we, wb_addr[0], wb_data,
			scop_edid_ack, scop_edid_stall, scop_edid_data,
			scop_edid_int);
	clkcounter clkclkhdmiinctr(i_clk, ck_pps, i_hdmi_in_clk, clkhdmiin_data);
	always @(posedge i_clk)
		r_clkhdmiin_ack <= (wb_stb)&&(clkhdmiin_sel);
	assign	clkhdmiin_ack   = r_clkhdmiin_ack;
	assign	clkhdmiin_stall = 1'b0;
	clkcounter clkclkhdmioutctr(i_clk, ck_pps, i_clk_200mhz, clkhdmiout_data);
	always @(posedge i_clk)
		r_clkhdmiout_ack <= (wb_stb)&&(clkhdmiout_sel);
	assign	clkhdmiout_ack   = r_clkhdmiout_ack;
	assign	clkhdmiout_stall = 1'b0;
`ifdef	CFG_ACCESS
	wire[31:0]	cfg_debug;
`ifdef	VERILATOR
	reg	r_cfg_ack;
	always @(posedge i_clk)
		r_cfg_ack <= (wb_stb)&&(cfg_sel);
	assign	cfg_ack   = r_cfg_ack;
	assign	cfg_stall = 1'b0;
	assign	cfg_data  = 32'h00;
`else
	wbicapetwo #(ICAPE_LGDIV)
		cfgport(i_clk, wb_cyc, (wb_stb)&&(cfg_sel), wb_we,
			wb_addr[4:0], wb_data,
			cfg_ack, cfg_stall, cfg_data);
`endif
`else	// CFG_ACCESS

	//
	// In the case that there is no cfg peripheral
	// responding on the wb bus
	assign	cfg_ack   = 1'b0;
	assign	cfg_err   = (cfg_stb);
	assign	cfg_stall = 0;
	assign	cfg_data  = 0;

`endif	// CFG_ACCESS

`ifdef	SPIO_ACCESS
	//
	// Special purpose I/O driver (buttons, LEDs, and switches)
	//
	assign	w_btn = { i_btnc, i_btnd, i_btnl, i_btnr, i_btnu };

	spio #(.NBTN(5), .NLEDS(8), .NSW(8)) spioi(i_clk,
		wb_cyc, (wb_stb)&&(spio_sel), wb_we, wb_data, wb_sel,
			spio_ack, spio_stall, spio_data,
		i_sw, w_btn, w_led, spio_int);

	assign	o_led = w_led;

`else	// SPIO_ACCESS
	assign	w_btn = 0;
	assign	o_led = 0;
	assign	spio_int = 1'b0;	// spio.INT.SPIO.WIRE
`endif	// SPIO_ACCESS

`ifdef	NETCTRL_ACCESS
	wire[31:0]	mdio_debug;
	enetctrl #(2)
		mdio(i_clk, i_reset, wb_cyc, (wb_stb)&&(mdio_sel), wb_we,
				wb_addr[4:0], wb_data[15:0],
			mdio_ack, mdio_stall, mdio_data,
			o_mdclk, o_mdio, i_mdio, o_mdwe, mdio_debug);
`else	// NETCTRL_ACCESS
	assign	o_mdclk = 1'b1;
	assign	o_mdio  = 1'b1;
	assign	o_mdwe  = 1'b0;

	//
	// In the case that there is no mdio peripheral
	// responding on the wb bus
	assign	mdio_ack   = 1'b0;
	assign	mdio_err   = (mdio_stb);
	assign	mdio_stall = 0;
	assign	mdio_data  = 0;

`endif	// NETCTRL_ACCESS

	always @(posedge i_clk)
		if (wb_err)
			r_buserr_addr <= wb_addr;
	assign	buserr_data = { {(32-2-28){1'b0}},
			r_buserr_addr, 2'b00 };
	assign	buildtime_data = `BUILDTIME;
	assign	buildtime_ack = wb_stb && buildtime_sel;
	assign	buildtime_stall = 1'b0;
`ifdef	OLEDBW_ACCESS
	wboledbw #(.CBITS(4)) oledctrl(i_clk,
		(wb_cyc), (wb_stb)&&(oled_sel), wb_we,
				wb_addr[1:0], wb_data,
			oled_ack, oled_stall, oled_data,
		o_oled_sck, o_oled_mosi, o_oled_dcn,
		{ o_oled_reset_n, o_oled_panel_en, o_oled_logic_en },
		oled_int);
`else	// OLEDBW_ACCESS
	assign	o_oled_sck     = 1'b1;
	assign	o_oled_mosi    = 1'b1;
	assign	o_oled_dcn     = 1'b1;
	assign	o_oled_reset_n = 1'b0;
	assign	o_oled_panel_en= 1'b0;
	assign	o_oled_logic_en= 1'b0;

	assign	oled_int = 1'b0;	// oled.INT.OLED.WIRE
`endif	// OLEDBW_ACCESS

`ifdef	GPSTRK_ACCESS
	wire	[1:0]	ck_dbg;

	gpsclock #(.DEFAULT_STEP(GPSCLOCK_DEFAULT_STEP))
		ppsck(i_clk, 1'b0, gps_pps, ck_pps, gps_led,
			(wb_stb)&&(gck_sel), wb_we, wb_addr[1:0], wb_data,
				gck_ack, gck_stall, gck_data,
			gps_tracking, gps_now, gps_step, gps_err, gps_locked,
			ck_dbg);

	assign	ck_pps2= ck_pps;
`else	// GPSTRK_ACCESS
	wire	[31:0]	pre_step;
	assign	pre_step = { 16'h00, (({GPSCLOCK_DEFAULT_STEP[27:0],20'h00})
				>>GPSCLOCK_DEFAULT_STEP[31:28]) };
	always @(posedge i_clk)
		{ ck_pps, gps_step[31:0] } <= gps_step + pre_step;
	assign	gck_stall  = 1'b0;
	assign	gps_now    = 64'h0;
	assign	gps_err    = 64'h0;
	assign	gps_step   = 64'h0;
	assign	gps_led    = 1'b0;
	assign	gps_locked = 1'b0;

	assign	ck_pps2 = 1'b0;	// gck.INT.PPS.WIRE
`endif	// GPSTRK_ACCESS


	reg	scope_hdmiin_trigger, scope_hdmiin_tmp, scope_hdmiin_pre_trigger,
		scope_hdmiin_count_triggered;
	wire	scope_hdmiin_clear_stb;
	reg	[31:0]	scope_hdmiin_counter, scope_hdmiin_trigger_foo;
	initial	scope_hdmiin_pre_trigger = 1'b1;
	always @(posedge i_hdmi_in_clk)
		if (scope_hdmiin_trigger_foo == 0)
		begin
			scope_hdmiin_trigger_foo <= 32'd2475000-1'b1;
			scope_hdmiin_pre_trigger <= 1'b1;
		end else begin
			scope_hdmiin_trigger_foo <= scope_hdmiin_trigger_foo-1'b1;
			scope_hdmiin_pre_trigger <= 1'b0;
		end

	transferstb scope_hdmiin_clearctri(i_clk, i_hdmi_in_clk,
		((wb_stb)&&(scope_hdmiin_sel)&&(wb_we)&&(!wb_addr[0])),
		scope_hdmiin_clear_stb);

	initial	scope_hdmiin_count_triggered = 1'b0;
	always @(posedge i_hdmi_in_clk)
		if (scope_hdmiin_clear_stb)
			scope_hdmiin_count_triggered <= 1'b0;
		else if (scope_hdmiin_pre_trigger)
			scope_hdmiin_count_triggered <= 1'b1;

	initial	scope_hdmiin_counter = 32'hffff_ffff;
	always @(posedge i_hdmi_in_clk)
		if (!scope_hdmiin_count_triggered)
			scope_hdmiin_counter <= hdmi_scope_frame_offset_data;
		else if (scope_hdmiin_counter != 0)
			scope_hdmiin_counter <= scope_hdmiin_counter - 1'b1;

	initial	scope_hdmiin_trigger = 1'b0;
	always @(posedge i_hdmi_in_clk)
		scope_hdmiin_trigger <= (scope_hdmiin_counter == 0);

	wbscope #(.LGMEM(5'd14), .SYNCHRONOUS(0)
		) copyhdmiin(i_hdmi_in_clk, 1'b1,
			scope_hdmiin_trigger, hin_dbg_scope,
		i_clk, wb_cyc, (wb_stb)&&(scope_hdmiin_sel), wb_we, wb_addr[0],
				{ wb_data[31:20], 20'h0 },
			scope_hdmiin_ack, scope_hdmiin_stall,
			scope_hdmiin_data,
		scop_hdmiin_int);
`ifdef	FLASHCFG_ACCESS
	// The Flash control interface result comes back together with the
	// flash interface itself.  Hence, we always return zero here.
	assign	flashcfg_ack   = 1'b0;
	assign	flashcfg_stall = 1'b0;
	assign	flashcfg_data  = flash_data;
`else	// FLASHCFG_ACCESS

	//
	// In the case that there is no flashcfg peripheral
	// responding on the wb bus
	assign	flashcfg_ack   = 1'b0;
	assign	flashcfg_err   = (flashcfg_stb);
	assign	flashcfg_stall = 0;
	assign	flashcfg_data  = 0;

`endif	// FLASHCFG_ACCESS

`ifdef	MOUSE_ACCESS
	wbmouse themouse(i_clk,
		(wb_cyc), (wb_stb)&&(mous_sel), wb_we, wb_addr[1:0], wb_data,
			mous_ack, mous_stall, mous_data,
		i_ps2, o_ps2,
		scrn_mouse, mous_interrupt);
`else	// MOUSE_ACCESS
	// If there is no mouse, declare mouse types of things to be .. absent
	assign	scrn_mouse     = 32'h00;
	assign	o_ps2          = 2'b11;
	assign	mous_interrupt = 1'b0;	// mous.INT.MOUSE.WIRE
`endif	// MOUSE_ACCESS

`ifdef	HDMI_IN_EDID_ACCESS
	wbi2cslave	#( .INITIAL_MEM("edid.hex"),
		.I2C_READ_ONLY(1'b1),
		.MEM_ADDR_BITS(8))
	    the_input_edid(i_clk, 1'b0,
		wb_cyc, (wb_stb)&&(edin_sel), wb_we, wb_addr[8-3:0], wb_data,
			wb_sel, edin_ack, edin_stall, edin_data,
		i_hdmi_in_scl, i_hdmi_in_sda, o_hdmi_in_scl, o_hdmi_in_sda,
		edid_dbg);
`else	// HDMI_IN_EDID_ACCESS
	assign	o_hdmi_in_scl = 1'b1;
	assign	o_hdmi_in_sda = 1'b1;
`endif	// HDMI_IN_EDID_ACCESS

`ifdef	SDSPI_SCOPE
	assign	scope_sdcard_trigger = (wb_stb)
				&&(sdcard_sel)&&(wb_we);
	assign	scope_sdcard_ce = 1'b1;
	wbscope #(5'h9) sdspiscope(i_clk, scope_sdcard_ce,
			scope_sdcard_trigger,
			sdspi_debug,
			i_clk, wb_cyc,
			(wb_stb)&&(scope_sdcard_sel),
			wb_we,
			wb_addr[0],
			wb_data,
			scope_sdcard_ack,
			scope_sdcard_stall,
			scope_sdcard_data,
			scope_sdcard_int);

`else	// SDSPI_SCOPE

	//
	// In the case that there is no scope_sdcard peripheral
	// responding on the wb bus
	assign	scope_sdcard_ack   = 1'b0;
	assign	scope_sdcard_err   = (scope_sdcard_stb);
	assign	scope_sdcard_stall = 0;
	assign	scope_sdcard_data  = 0;

	assign	scope_sdcard_int = 1'b0;	// scope_sdcard.INT.SDSCOPE.WIRE
`endif	// SDSPI_SCOPE

`ifdef	WBUBUS_MASTER
	// The Host USB interface, to be used by the WB-UART bus
	rxuartlite	#(BUSUART) rcv(s_clk, i_host_uart_rx,
				rx_host_stb, rx_host_data);
	txuartlite	#(BUSUART) txv(s_clk, tx_host_stb, tx_host_data,
				o_host_uart_tx, tx_host_busy);

`ifdef	INCLUDE_ZIPCPU
	// assign	wbu_zip_sel   = wbu_addr[28];
`else
	assign	wbu_zip_sel   = 1'b0;
	assign	zip_dbg_ack   = 1'b0;
	assign	zip_dbg_stall = 1'b0;
	assign	zip_dbg_data  = 0;
`endif
`ifndef	BUSPIC_ACCESS
	wire	w_bus_int;
	assign	w_bus_int = 1'b0;
`endif
	wire	[31:0]	wbu_tmp_addr;
	wbubus	genbus(i_clk, i_host_rx_stb, i_host_rx_data,
			wbu_cyc, wbu_stb, wbu_we, wbu_tmp_addr, wbu_data,
			(wbu_zip_sel)?zip_dbg_ack:wbu_ack,
			(wbu_zip_sel)?zip_dbg_stall:wbu_stall,
				(wbu_zip_sel)?1'b0:wbu_err,
				(wbu_zip_sel)?zip_dbg_data:wbu_idata,
			w_bus_int,
			o_host_tx_stb, o_host_tx_data, i_host_tx_busy,
			wbubus_dbg[0]);
	assign	wbu_sel = 4'hf;
	assign	wbu_addr = wbu_tmp_addr[(29-1):0];
`else	// WBUBUS_MASTER
`endif	// WBUBUS_MASTER

`ifdef	FLASH_ACCESS
	qflexpress #(.LGFLASHSZ(24), .OPT_CLKDIV(1),
		.NDUMMY(6), .RDDELAY(1),
		.OPT_STARTUP_FILE("spansion.hex"),
`ifdef	FLASHCFG_ACCESS
		.OPT_CFG(1'b1)
`else
		.OPT_CFG(1'b0)
`endif
		)
		flashi(i_clk, i_reset,
			(wb_cyc), (wb_stb)&&(flash_sel),
			(wb_stb)&&(flashcfg_sel), wb_we,
			wb_addr[(24-3):0], wb_data,
			flash_ack, flash_stall, flash_data,
			o_qspi_sck, o_qspi_cs_n, o_qspi_mod, o_qspi_dat, i_qspi_dat,
			flash_dbg_trigger, flash_debug);
`else	// FLASH_ACCESS
	assign	o_qspi_sck  = 1'b1;
	assign	o_qspi_cs_n = 1'b1;
	assign	o_qspi_mod  = 2'b01;
	assign	o_qspi_dat  = 4'b1111;

	//
	// In the case that there is no flash peripheral
	// responding on the wb bus
	assign	flash_ack   = 1'b0;
	assign	flash_err   = (flash_stb);
	assign	flash_stall = 0;
	assign	flash_data  = 0;

`endif	// FLASH_ACCESS

`ifdef	PWRCOUNT_ACCESS
	initial	r_pwrcount_data = 32'h0;
	always @(posedge i_clk)
	if (r_pwrcount_data[31])
		r_pwrcount_data[30:0] <= r_pwrcount_data[30:0] + 1'b1;
	else
		r_pwrcount_data[31:0] <= r_pwrcount_data[31:0] + 1'b1;
	assign	pwrcount_data = r_pwrcount_data;
`else	// PWRCOUNT_ACCESS
`endif	// PWRCOUNT_ACCESS

`ifdef	RTCDATE_ACCESS
	//
	// The Calendar DATE
	//
	rtcdate	rtcdatei(i_clk, rtc_ppd,
		(wb_stb)&&(rtcdate_sel), wb_we, wb_data, wb_sel,
			rtcdate_ack, rtcdate_stall, rtcdate_data);
`else	// RTCDATE_ACCESS
`endif	// RTCDATE_ACCESS

`ifdef	SDSPI_ACCESS
	// SPI mapping
	wire	w_sd_cs_n, w_sd_mosi, w_sd_miso;

	sdspi	sdcardi(i_clk,
		wb_cyc,
			(wb_stb)&&(sdcard_sel),
			wb_we,
			wb_addr[1:0],
			wb_data,
			sdcard_ack, sdcard_stall, sdcard_data,
		w_sd_cs_n, o_sd_sck, w_sd_mosi, w_sd_miso,
		sdcard_int, 1'b1, sdspi_debug);

	assign	w_sd_miso = i_sd_data[0];
	assign	o_sd_data = { w_sd_cs_n, 3'b111 };
	assign	o_sd_cmd  = w_sd_mosi;
`else	// SDSPI_ACCESS
	assign	o_sd_sck   = 1'b1;
	assign	o_sd_cmd   = 1'b1;
	assign	o_sd_data  = 4'hf;

	//
	// In the case that there is no sdcard peripheral
	// responding on the wb bus
	assign	sdcard_ack   = 1'b0;
	assign	sdcard_err   = (sdcard_stb);
	assign	sdcard_stall = 0;
	assign	sdcard_data  = 0;

	assign	sdcard_int = 1'b0;	// sdcard.INT.SDCARD.WIRE
`endif	// SDSPI_ACCESS

	busexpander #(.AWIN(27), .DWIN(32),
			.DWOUT(128))
		xpandi32x128(
			i_clk,
			(wb_cyc),
			(wb_stb)&&(xpand_sel),
			wb_we,
			wb_addr[(27-1):0],
			wb_data, wb_sel,
			xpand_ack, xpand_stall,
			xpand_data, xpand_err,
			//
			xpand_bus_cyc,
			xpand_bus_stb,
			xpand_bus_we,
			xpand_bus_addr,
			xpand_bus_data,
			xpand_bus_sel,
			xpand_bus_ack,
			xpand_bus_stall,
			xpand_bus_idata,
			xpand_bus_err);
`ifdef	GPSTRK_ACCESS
	assign	subseconds_data = gps_now[31:0];
`else
	always @(posedge i_clk)
	if ((wb_stb)&&(subseconds_sel))
		r_subseconds_data <= wb_data;
	else
		r_subseconds_data <= r_subseconds_data
			+ { 16'h0, RTLCLKSTEP[31:16] };

	assign	subseconds_data = r_subseconds_data;
`endif
`ifdef	HDMIIN_ACCESS
	// HDMI input processor
	hdmiin	thehdmiin(i_clk, i_hdmi_in_clk, ck_pps,
			//
			i_hdmi_in_actual_delay_r,
			i_hdmi_in_actual_delay_g,
			i_hdmi_in_actual_delay_b,
			o_hdmi_in_delay,
			//
			i_hdmi_in_r, i_hdmi_in_g, i_hdmi_in_b,
			wb_cyc, (wb_stb)&&(hdmiin_sel), wb_we, wb_addr[3:0],
				wb_data, wb_sel,
			hdmiin_ack, hdmiin_stall, hdmiin_data,
			vid_cyc, vid_stb, vid_we,
				vid_addr, vid_data, vid_sel,
				vid_ack, vid_stall, vid_err,
			hdmiin_int,
			hin_pixels, hin_dbg_scope);

	assign	hdmi_in_r = hin_pixels[29:20];
	assign	hdmi_in_g = hin_pixels[19:10];
	assign	hdmi_in_b = hin_pixels[ 9: 0];
`else	// HDMIIN_ACCESS
	assign	hdmiin_int = 1'b0;	// hdmiin.INT.VSYNC.WIRE
`endif	// HDMIIN_ACCESS

`ifdef	INCLUDE_ZIPCPU
	//
	//
	// The ZipCPU/ZipSystem BUS master
	//
	//
	assign	zip_int_vector = { alt_int_vector[14:8], sys_int_vector[14:6] };
	zipsystem #(RESET_ADDRESS,ZIP_ADDRESS_WIDTH,10,0,
			ZIP_START_HALTED,ZIP_INTS)
		swic(i_clk, (i_reset)||(i_cpu_reset),
			// Zippys wishbone interface
			zip_cyc, zip_stb, zip_we, zip_addr, zip_data, zip_sel,
					zip_ack, zip_stall, zip_idata, zip_err,
			zip_int_vector, zip_cpu_int,
			// Debug wishbone interface
			(wbu_cyc), ((wbu_stb)&&(zip_dbg_sel)),wbu_we,
			wbu_addr[0],
			wbu_data, zip_dbg_ack, zip_dbg_stall, zip_dbg_data,
			zip_debug);
	assign	zip_trigger = zip_debug[31];
`else	// INCLUDE_ZIPCPU
	assign	zip_cpu_int = 1'b0;	// zip.INT.ZIP.WIRE
`endif	// INCLUDE_ZIPCPU

`ifdef	SDRAM_ACCESS
	assign	o_sdram_cyc  = sdr_cyc;
	assign	o_sdram_stb  =(sdr_stb)&&(sdram_sel);
	assign	o_sdram_we   = sdr_we;
	assign	o_sdram_addr = sdr_addr;
	assign	o_sdram_data = sdr_data;
	assign	o_sdram_sel  = sdr_sel;
	assign	sdram_ack   = i_sdram_ack;
	assign	sdram_stall = i_sdram_stall;
	assign	sdram_data = i_sdram_data;
	 assign	sdram_err   = 1'b0; // i_sdram_err;

`else	// SDRAM_ACCESS

	//
	// In the case that there is no sdram peripheral
	// responding on the sdr bus
	assign	sdram_ack   = 1'b0;
	assign	sdram_err   = (sdram_stb);
	assign	sdram_stall = 0;
	assign	sdram_data  = 0;

`endif	// SDRAM_ACCESS

`ifdef	INCLUDE_ZIPCPU
	//
	//
	// And an arbiter to decide who gets access to the bus
	//
	//
	// Clock speed = 100000000 Hz
	wbpriarbiter #(32,28)	bus_arbiter(i_clk,
		// The Zip CPU bus master --- gets the priority slot
		zip_cyc, (zip_stb)&&(zip_dwb_sel), zip_we, zip_addr, zip_data, zip_sel,
			zip_dwb_ack, zip_dwb_stall, zip_dwb_err,
		// The UART interface master
		(wbu_cyc),
			(wbu_stb)&&(wbu_dwb_sel),
			wbu_we,
			wbu_addr[(28-1):0],
			wbu_data, wbu_sel,
			wbu_dwb_ack, wbu_dwb_stall, wbu_dwb_err,
		// Common bus returns
		wbu_dwbi_cyc, wbu_dwbi_stb, wbu_dwbi_we, wbu_dwbi_addr, wbu_dwbi_odata, wbu_dwbi_sel,
			wbu_dwbi_ack, wbu_dwbi_stall, wbu_dwbi_err);

	// And because the ZipCPU and the Arbiter can create an unacceptable
	// delay, we often fail timing.  So, we add in a delay cycle
`else
	// If no ZipCPU, no delay arbiter is needed
	assign	wbu_dwbi_cyc   = wbu_cyc;
	assign	wbu_dwbi_stb   = wbu_stb;
	assign	wbu_dwbi_we    = wbu_we;
	assign	wbu_dwbi_addr  = wbu_addr;
	assign	wbu_dwbi_odata = wbu_data;
	assign	wbu_dwbi_sel   = wbu_sel;
	assign	wbu_dwb_ack    = wbu_dwbi_ack;
	assign	wbu_dwb_stall  = wbu_dwbi_stall;
	assign	wbu_dwb_err    = wbu_dwbi_err;
	assign	wbu_dwb_data   = wbu_dwbi_idata;
`endif	// INCLUDE_ZIPCPU

`ifdef	WBUBUS_MASTER
`ifdef	INCLUDE_ZIPCPU
`define	BUS_DELAY_NEEDED
`endif
`endif
`ifdef	BUS_DELAY_NEEDED
	busdelay #(28)	wbu_dwbi_delay(i_clk, i_reset,
		wbu_dwbi_cyc, wbu_dwbi_stb, wbu_dwbi_we, wbu_dwbi_addr, wbu_dwbi_odata, wbu_dwbi_sel,
			wbu_dwbi_ack, wbu_dwbi_stall, wbu_dwbi_idata, wbu_dwbi_err,
		wb_cyc, wb_stb, wb_we, wb_addr, wb_data, wb_sel,
			wb_ack, wb_stall, wb_idata, wb_err);
`else
	// If one of the two, the ZipCPU or the WBUBUS, isn't here, then we
	// don't need the bus delay, and we can go directly from the bus driver
	// to the bus itself
	//
	assign	wb_cyc    = wbu_dwbi_cyc;
	assign	wb_stb    = wbu_dwbi_stb;
	assign	wb_we     = wbu_dwbi_we;
	assign	wb_addr   = wbu_dwbi_addr;
	assign	wb_data   = wbu_dwbi_odata;
	assign	wb_sel    = wbu_dwbi_sel;
	assign	wbu_dwbi_ack   = wb_ack;
	assign	wbu_dwbi_stall = wb_stall;
	assign	wbu_dwbi_err   = wb_err;
	assign	wbu_dwbi_idata = wb_idata;
`endif
	assign	wbu_dwb_data = wbu_dwbi_idata;
`ifdef	INCLUDE_ZIPCPU
	assign	zip_dwb_data = wbu_dwbi_idata;
`endif
	//
	//
	// Arbitrate between two busses
	//
	//
	// Clock speed = 100000000
	wbpriarbiter #(128,25)
		sdr_arb(i_clk,
			vid_cyc, (vid_stb)&&(vid_bus_sel), vid_we, vid_addr,
				vid_data, vid_sel,
			vid_bus_ack, vid_bus_stall, vid_bus_err,
		// The UART interface master
		xpand_bus_cyc,
			(xpand_bus_stb)&&(sdram_arbiter_sel),
			xpand_bus_we,
			xpand_bus_addr[(25-1):0],
			xpand_bus_data, xpand_bus_sel,
			sdram_arbiter_ack, sdram_arbiter_stall, sdram_arbiter_err,
		// Common bus returns
		sdram_arbiteri_cyc, sdram_arbiteri_stb, sdram_arbiteri_we, sdram_arbiteri_addr, sdram_arbiteri_odata, sdram_arbiteri_sel,
			sdram_arbiteri_ack, sdram_arbiteri_stall, sdram_arbiteri_err);

	busdelay #(25,128) sdram_arbiteri_delay(
		i_clk, i_reset,
		sdram_arbiteri_cyc, sdram_arbiteri_stb, sdram_arbiteri_we, sdram_arbiteri_addr, sdram_arbiteri_odata, sdram_arbiteri_sel,
			sdram_arbiteri_ack, sdram_arbiteri_stall, sdram_arbiteri_idata, sdram_arbiteri_err,
		sdr_cyc, sdr_stb, sdr_we, sdr_addr, sdr_data, sdr_sel,
			sdr_ack, sdr_stall, sdr_idata, sdr_err);
	assign	sdram_arbiter_data  = sdram_arbiteri_idata;
	assign	vid_bus_data = sdram_arbiteri_idata;
`ifdef	BUSPIC_ACCESS
	//
	// The BUS Interrupt controller
	//
	icontrol #(15)	buspici(i_clk, 1'b0, (wb_stb)&&(buspic_sel),
			wb_we, wb_data,
			buspic_ack, buspic_stall, buspic_data,
			bus_int_vector, w_bus_int);
`else	// BUSPIC_ACCESS
	assign	w_bus_int = 1'b0;	// buspic.INT.BUS.WIRE
`endif	// BUSPIC_ACCESS

`ifdef	GPSUART_ACCESS
	wbuart #(.INITIAL_SETUP(31'h000028b0))
 		gpsu_uart(i_clk, 1'b0,
 			wb_cyc, (wb_stb)&&(gpsu_sel), wb_we,
				wb_addr[1:0], wb_data,
 			gpsu_ack, gpsu_stall, gpsu_data,
 			i_gpsu_rx, o_gpsu_tx, w_gpsu_cts_n, w_gpsu_rts_n,
			gpsurx_int, gpsutx_int,
			gpsurxf_int, gpsutxf_int);
`else	// GPSUART_ACCESS
	assign	o_gpsu_tx    = 1'b1;
	assign	w_gpsu_rts_n = 1'b0;

	//
	// In the case that there is no gpsu peripheral
	// responding on the wb bus
	assign	gpsu_ack   = 1'b0;
	assign	gpsu_err   = (gpsu_stb);
	assign	gpsu_stall = 0;
	assign	gpsu_data  = 0;

	assign	gpsutx_int = 1'b0;	// gpsu.INT.GPSTX.WIRE
	assign	gpsutxf_int = 1'b0;	// gpsu.INT.GPSTXF.WIRE
	assign	gpsurx_int = 1'b0;	// gpsu.INT.GPSRX.WIRE
	assign	gpsurxf_int = 1'b0;	// gpsu.INT.GPSRXF.WIRE
`endif	// GPSUART_ACCESS

`ifdef	BKRAM_ACCESS
	memdev #(.LGMEMSZ(20), .EXTRACLOCK(1))
		bkrami(i_clk, i_reset,
			(wb_cyc), (wb_stb)&&(bkram_sel), wb_we,
				wb_addr[(20-3):0], wb_data, wb_sel,
				bkram_ack, bkram_stall, bkram_data);
`else	// BKRAM_ACCESS

	//
	// In the case that there is no bkram peripheral
	// responding on the wb bus
	assign	bkram_ack   = 1'b0;
	assign	bkram_err   = (bkram_stb);
	assign	bkram_stall = 0;
	assign	bkram_data  = 0;

`endif	// BKRAM_ACCESS

`ifdef	GPSTRK_ACCESS
	gpsclock_tb #(.CLOCK_FREQUENCY_HZ(100000000))
		ppstb(i_clk, ck_pps, tb_pps,
			(wb_stb)&&(gtb_sel), wb_we, wb_addr[2:0], wb_data,
				gtb_ack, gtb_stall, gtb_data,
			gps_err, gps_now, gps_step);

`ifdef	GPSTB
	assign	gps_pps = tb_pps;
`else
	assign	gps_pps = i_gps_pps;
`endif

`endif



endmodule // main.v
