################################################################################
##
## Filename: 	dlyarbiter.txt
##
## Project:	AutoFPGA, a utility for composing FPGA designs from peripherals
##
## Purpose:	
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
##
## Copyright (C) 2017-2019, Gisselquist Technology, LLC
##
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of  the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
##
## License:	GPL, v3, as defined and found on www.gnu.org,
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
##
@PREFIX=zip_dwb
@$NADDR=(1<<@$(BUS.AWID))
@ERROR.WIRE=@$(PREFIX)_err
@SLAVE.TYPE=BUS
@SLAVE.BUS.NAME=zip
@SLAVE.BUS.WIDTH=32
@MASTER.TYPE=ARBITER
@MASTER.BUS=wb
@BUS.NAME=wb
##
@PREFIX=wbu_dwb
@$NADDR=(1<<@$(BUS.AWID))
@ERROR.WIRE=@$(PREFIX)_err
@SLAVE.TYPE=BUS
@SLAVE.BUS.NAME=wbu
@$SLAVE.BUS.WIDTH=32
@SLAVE.ORDER=0
@MASTER.TYPE=ARBITER
@MASTER.BUS=wb
@BUS.NAME=wb
@BUS.WIDTH=32
@BUS.TYPE=wb
@BUS.CLOCK=clk
@$AWID=@$(MASTER.BUS.AWID)
@$NADDR=(1<<@$(MASTER.BUS.AWID))
@MAIN.DEFNS=
	// Bus arbiter's internal lines
	wire		@$(PREFIX)i_cyc, @$(PREFIX)i_stb, @$(PREFIX)i_we,
			@$(PREFIX)i_ack, @$(PREFIX)i_stall, @$(PREFIX)i_err;
	wire	[(@$(AWID)-1):0]	@$(PREFIX)i_addr;
	wire	[(@$(MASTER.BUS.WIDTH)-1):0]	@$(PREFIX)i_odata, @$(PREFIX)i_idata;
	wire	[(@$(MASTER.BUS.NSELECT)-1):0]	@$(PREFIX)i_sel;
@MAIN.INSERT=
`ifdef	INCLUDE_ZIPCPU
	//
	//
	// And an arbiter to decide who gets access to the bus
	//
	//
	// Clock speed = @$(CLOCK.FREQUENCY) Hz
	wbpriarbiter #(32,@$(AWID))	bus_arbiter(i_clk,
		// The Zip CPU bus master --- gets the priority slot
		zip_cyc, (zip_stb)&&(zip_dwb_sel), zip_we, zip_addr, zip_data, zip_sel,
			zip_dwb_ack, zip_dwb_stall, zip_dwb_err,
		// The UART interface master
		(@$(SLAVE.BUS.NAME)_cyc),
			(@$(SLAVE.BUS.NAME)_stb)&&(@$(PREFIX)_sel),
			@$(SLAVE.BUS.NAME)_we,
			@$(SLAVE.BUS.NAME)_addr[(@$(AWID)-1):0],
			@$(SLAVE.BUS.NAME)_data, @$(SLAVE.BUS.NAME)_sel,
			@$(PREFIX)_ack, @$(PREFIX)_stall, @$(PREFIX)_err,
		// Common bus returns
		@$(PREFIX)i_cyc, @$(PREFIX)i_stb, @$(PREFIX)i_we, @$(PREFIX)i_addr, @$(PREFIX)i_odata, @$(PREFIX)i_sel,
			@$(PREFIX)i_ack, @$(PREFIX)i_stall, @$(PREFIX)i_err);

	// And because the ZipCPU and the Arbiter can create an unacceptable
	// delay, we often fail timing.  So, we add in a delay cycle
`else
	// If no ZipCPU, no delay arbiter is needed
	assign	@$(PREFIX)i_cyc   = @$(SLAVE.BUS.NAME)_cyc;
	assign	@$(PREFIX)i_stb   = @$(SLAVE.BUS.NAME)_stb;
	assign	@$(PREFIX)i_we    = @$(SLAVE.BUS.NAME)_we;
	assign	@$(PREFIX)i_addr  = @$(SLAVE.BUS.NAME)_addr;
	assign	@$(PREFIX)i_odata = @$(SLAVE.BUS.NAME)_data;
	assign	@$(PREFIX)i_sel   = @$(SLAVE.BUS.NAME)_sel;
	assign	@$(PREFIX)_ack    = @$(PREFIX)i_ack;
	assign	@$(PREFIX)_stall  = @$(PREFIX)i_stall;
	assign	@$(PREFIX)_err    = @$(PREFIX)i_err;
	assign	@$(PREFIX)_data   = @$(PREFIX)i_idata;
`endif	// INCLUDE_ZIPCPU

`ifdef	WBUBUS_MASTER
`ifdef	INCLUDE_ZIPCPU
`define	BUS_DELAY_NEEDED
`endif
`endif
`ifdef	BUS_DELAY_NEEDED
	busdelay #(@$(AWID))	@$(PREFIX)i_delay(i_clk, i_reset,
		@$(PREFIX)i_cyc, @$(PREFIX)i_stb, @$(PREFIX)i_we, @$(PREFIX)i_addr, @$(PREFIX)i_odata, @$(PREFIX)i_sel,
			@$(PREFIX)i_ack, @$(PREFIX)i_stall, @$(PREFIX)i_idata, @$(PREFIX)i_err,
		wb_cyc, wb_stb, wb_we, wb_addr, wb_data, wb_sel,
			wb_ack, wb_stall, wb_idata, wb_err);
`else
	// If one of the two, the ZipCPU or the WBUBUS, isn't here, then we
	// don't need the bus delay, and we can go directly from the bus driver
	// to the bus itself
	//
	assign	@$(MASTER.BUS.NAME)_cyc    = @$(PREFIX)i_cyc;
	assign	@$(MASTER.BUS.NAME)_stb    = @$(PREFIX)i_stb;
	assign	@$(MASTER.BUS.NAME)_we     = @$(PREFIX)i_we;
	assign	@$(MASTER.BUS.NAME)_addr   = @$(PREFIX)i_addr;
	assign	@$(MASTER.BUS.NAME)_data   = @$(PREFIX)i_odata;
	assign	@$(MASTER.BUS.NAME)_sel    = @$(PREFIX)i_sel;
	assign	@$(PREFIX)i_ack   = @$(MASTER.BUS.NAME)_ack;
	assign	@$(PREFIX)i_stall = @$(MASTER.BUS.NAME)_stall;
	assign	@$(PREFIX)i_err   = @$(MASTER.BUS.NAME)_err;
	assign	@$(PREFIX)i_idata = @$(MASTER.BUS.NAME)_idata;
`endif
	assign	@$(PREFIX)_data = @$(PREFIX)i_idata;
`ifdef	INCLUDE_ZIPCPU
	assign	zip_dwb_data = @$(PREFIX)i_idata;
`endif
@RTL.MAKE.GROUP= BUSDLY
@RTL.MAKE.FILES= busdelay.v wbpriarbiter.v
@RTL.MAKE.SUBD=cpu
