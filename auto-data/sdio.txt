################################################################################
##
## Filename:	auto-data/sdio.txt
##
## Project:	AutoFPGA, a utility for composing FPGA designs from peripherals
## {{{
## Purpose:	Describes how to connect an SDIO peripheral to a wishbone
##		bus, as used by autofpga.
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2017-2024, Gisselquist Technology, LLC
## {{{
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	GPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
## }}}
@PREFIX=sdio
@DEVID=SDIO
@NAME=SDIO SD Card
@NADDR=8
@CRCTOKEN=1
@$NUMIO=4
@ACCESS=SDIO_ACCESS
@SLAVE.TYPE=OTHER
@SLAVE.BUS=wbflash
@MASTER.TYPE=DMA
@MASTER.BUS=wbwide
@MASTER.ANSPREFIX=dma_
## @SCOPE.TRIGGER=@$(PREFIX)_debug[31]
## @SCOPE.DATA=@$(PREFIX)_debug
@INT.SDCARD.WIRE= @$(PREFIX)_int
@INT.SDCARD.PIC= syspic
@CARD_DETECT=1'b1
@OPT_SERDES=1'b1
@OPT_DDR=1'b1
@OPT_EMMC=1'b0
@OPT_DMA=1'b1
@OPT_1P8V=1'b0
@TOP.IOPREFIX=sd
@OPT_HWRESET=@$(OPT_EMMC)
@SDIO.IORESET=
@SDIO.CLKASSIGN=
	assign	o_@$(TOP.IOPREFIX)_clk = w_@$(PREFIX)_ck;
@SDIO.DSASSIGN=
	assign	w_@$(PREFIX)_ds    = 1'b0;
@SDIO.HWRSTASSIGN=
@SDIO.RSTDECL=
@SDIO.DSDECL=
@SDIO.CDETDECL= i_@$(TOP.IOPREFIX)_cd_n,
@SDIO.CLKDECL= o_@$(TOP.IOPREFIX)_clk,
@SDIO.IORST=
@SDIO.IODS=
@SDIO.IOCDET=
	input	wire		i_@$(TOP.IOPREFIX)_cd_n;
@SDIO.IOCLK=
	output	wire		o_@$(TOP.IOPREFIX)_clk;
@TOP.PORTLIST=
		// @$(NAME)
@$(SDIO.RSTDECL)
@$(SDIO.CLKDECL)
@$(SDIO.CDETDECL)
@$(SDIO.DSDECL)
		io_@$(TOP.IOPREFIX)_cmd, io_@$(TOP.IOPREFIX)_dat
@TOP.IODECL=
	// @$(NAME)
	// {{{
@$(SDIO.IORST)
@$(SDIO.IOCLK)
@$(SDIO.IODS)
@$(SDIO.IOCDET)
	inout	wire		io_@$(TOP.IOPREFIX)_cmd;
	inout	wire	[@$(NUMIO)-1:0]	io_@$(TOP.IOPREFIX)_dat;
	// }}}
@SDIO.TOP.DEFNS=
	// @$(NAME) definitions
	// {{{
	wire		w_@$(PREFIX)_hwreset_n, w_@$(PREFIX)_1p8v;
	wire		w_@$(PREFIX)_cfg_ddr;
	wire		w_@$(PREFIX)_cfg_ds, w_@$(PREFIX)_cfg_dscmd;
	wire	[4:0]	w_@$(PREFIX)_cfg_sample_shift;
	wire		w_@$(PREFIX)_cmd_tristate;
	wire		w_@$(PREFIX)_data_tristate;
		//
	wire	[7:0]	w_@$(PREFIX)_sdclk;
	wire		w_@$(PREFIX)_cmd_en;
	wire	[1:0]	w_@$(PREFIX)_cmd_data;
	wire		w_@$(PREFIX)_data_en;
	wire		w_@$(PREFIX)_rx_en;
	wire	[31:0]	w_@$(PREFIX)_tx_data;
		//
	wire	[1:0]	w_@$(PREFIX)_cmd_strb;
	wire	[1:0]	w_@$(PREFIX)_cmd_idata;
	wire		w_@$(PREFIX)_cmd_collision;
	wire		w_@$(PREFIX)_crcack,
			w_@$(PREFIX)_crcnak;
	wire		w_@$(PREFIX)_card_busy;
	wire	[1:0]	w_@$(PREFIX)_rx_strb;
	wire	[15:0]	w_@$(PREFIX)_rx_data;
		//
	wire		w_@$(PREFIX)_ac_valid;
	wire	[1:0]	w_@$(PREFIX)_ac_data;
	wire		w_@$(PREFIX)_ad_valid;
	wire	[31:0]	w_@$(PREFIX)_ad_data;

	wire		w_@$(PREFIX)_ck;
	wire		w_@$(PREFIX)_ds;
	wire	[31:0]	w_@$(PREFIX)_debug;
	// }}}
@TOP.DEFNS=
@$(SDIO.TOP.DEFNS)
@SDIO.FRONTEND=
	sdfrontend #(
		.OPT_SERDES(@$(OPT_SERDES)),
		.OPT_DDR(@$(OPT_DDR)),
		.NUMIO(@$(NUMIO)),
		.BUSY_CLOCKS(16),
		.OPT_CRCTOKEN(@$(CRCTOKEN))
	) u_@$(PREFIX)_frontend (
		// {{{
		.i_clk(s_clk), .i_hsclk(s_clk_400mhz), .i_reset(s_reset),
		// Configuration
		.i_cfg_ddr(w_@$(PREFIX)_cfg_ddr),
		.i_cfg_ds(w_@$(PREFIX)_cfg_ds),
		.i_cfg_dscmd(w_@$(PREFIX)_cfg_dscmd),
		.i_sample_shift(w_@$(PREFIX)_cfg_sample_shift),
		.i_cmd_tristate(w_@$(PREFIX)_cmd_tristate),
		.i_data_tristate(w_@$(PREFIX)_data_tristate),
		// Run-time inputs
		.i_sdclk(w_@$(PREFIX)_sdclk),
		.i_cmd_en(w_@$(PREFIX)_cmd_en),
		.i_cmd_data(w_@$(PREFIX)_cmd_data),
		.i_data_en(w_@$(PREFIX)_data_en),
		.i_rx_en(w_@$(PREFIX)_rx_en),
		.i_tx_data(w_@$(PREFIX)_tx_data),
		// Return values
		.o_cmd_strb(w_@$(PREFIX)_cmd_strb),
		.o_cmd_data(w_@$(PREFIX)_cmd_idata),
		.o_cmd_collision(w_@$(PREFIX)_cmd_collision),
		.o_crcack(w_@$(PREFIX)_crcack),
		.o_crcnak(w_@$(PREFIX)_crcnak),
		.o_data_busy(w_@$(PREFIX)_card_busy),
		.o_rx_strb( w_@$(PREFIX)_rx_strb),
		.o_rx_data( w_@$(PREFIX)_rx_data),
		//
		.MAC_VALID(w_@$(PREFIX)_ac_valid),
		.MAC_DATA( w_@$(PREFIX)_ac_data),
		.MAD_VALID(w_@$(PREFIX)_ad_valid),
		.MAD_DATA( w_@$(PREFIX)_ad_data),
		// IO ports
		.o_ck(w_@$(PREFIX)_ck),
		.i_ds(w_@$(PREFIX)_ds),
		.io_cmd(io_@$(TOP.IOPREFIX)_cmd),
		.io_dat(io_@$(TOP.IOPREFIX)_dat),
		.o_debug(w_@$(PREFIX)_debug)
		// }}}
	);
@TOP.INSERT=
@$(SDIO.FRONTEND)

@$(SDIO.CLKASSIGN)
@$(SDIO.DSASSIGN)
@TOP.MAIN=
		// @$(NAME)
		!i_@$(TOP.IOPREFIX)_cd_n,
		//
		w_@$(PREFIX)_cfg_ddr,
		w_@$(PREFIX)_cfg_ds,
		w_@$(PREFIX)_cfg_dscmd,
		w_@$(PREFIX)_cfg_sample_shift,
		w_@$(PREFIX)_cmd_tristate,
		w_@$(PREFIX)_data_tristate,
		//
		w_@$(PREFIX)_sdclk,
		w_@$(PREFIX)_cmd_en,
		w_@$(PREFIX)_cmd_data,
		w_@$(PREFIX)_data_en,
		w_@$(PREFIX)_rx_en,
		w_@$(PREFIX)_tx_data,
		//
		w_@$(PREFIX)_cmd_strb,
		w_@$(PREFIX)_cmd_idata,
		w_@$(PREFIX)_cmd_collision,
		w_@$(PREFIX)_crcack,
		w_@$(PREFIX)_crcnak,
		w_@$(PREFIX)_card_busy,
		w_@$(PREFIX)_rx_strb,
		w_@$(PREFIX)_rx_data,
		//
		w_@$(PREFIX)_ac_valid,
		w_@$(PREFIX)_ac_data,
		w_@$(PREFIX)_ad_valid,
		w_@$(PREFIX)_ad_data,
		w_@$(PREFIX)_hwreset_n, w_@$(PREFIX)_1p8v,
		w_@$(PREFIX)_debug
@TOP.INSERT=
	assign	i_@$(PREFIX)_ds = 1'b0;
@MAIN.PORTLIST=
		// @$(NAME)
		i_@$(PREFIX)_detect,
		//
		o_@$(PREFIX)_cfg_ddr,
		o_@$(PREFIX)_cfg_ds,
		o_@$(PREFIX)_cfg_dscmd,
		o_@$(PREFIX)_cfg_sample_shift,
		o_@$(PREFIX)_cmd_tristate,
		o_@$(PREFIX)_data_tristate,
		//
		o_@$(PREFIX)_sdclk,
		o_@$(PREFIX)_cmd_en,
		o_@$(PREFIX)_cmd_data,
		o_@$(PREFIX)_data_en,
		o_@$(PREFIX)_rx_en,
		o_@$(PREFIX)_tx_data,
		//
		i_@$(PREFIX)_cmd_strb,
		i_@$(PREFIX)_cmd_data,
		i_@$(PREFIX)_cmd_collision,
		i_@$(PREFIX)_crcack,
		i_@$(PREFIX)_crcnak,
		i_@$(PREFIX)_card_busy,
		i_@$(PREFIX)_rx_strb,
		i_@$(PREFIX)_rx_data,
		//
		i_@$(PREFIX)_ac_valid,
		i_@$(PREFIX)_ac_data,
		i_@$(PREFIX)_ad_valid,
		i_@$(PREFIX)_ad_data,
		o_@$(PREFIX)_hwreset_n, o_@$(PREFIX)_1p8v,
		i_@$(PREFIX)_debug
@MAIN.IODECL=
	// @$(NAME) declarations
	// {{{
	input	wire		i_@$(PREFIX)_detect;
		//
	output	wire		o_@$(PREFIX)_cfg_ddr;
	output	wire		o_@$(PREFIX)_cfg_ds;
	output	wire		o_@$(PREFIX)_cfg_dscmd;
	output	wire	[4:0]	o_@$(PREFIX)_cfg_sample_shift;
	output	wire		o_@$(PREFIX)_cmd_tristate;
	output	wire		o_@$(PREFIX)_data_tristate;
		//
	output	wire	[7:0]	o_@$(PREFIX)_sdclk;
	output	wire		o_@$(PREFIX)_cmd_en;
	output	wire	[1:0]	o_@$(PREFIX)_cmd_data;
	output	wire		o_@$(PREFIX)_data_en;
	output	wire		o_@$(PREFIX)_rx_en;
	output	wire	[31:0]	o_@$(PREFIX)_tx_data;
		//
	input	wire	[1:0]	i_@$(PREFIX)_cmd_strb;
	input	wire	[1:0]	i_@$(PREFIX)_cmd_data;
	input	wire		i_@$(PREFIX)_cmd_collision;
	input	wire		i_@$(PREFIX)_crcack;
	input	wire		i_@$(PREFIX)_crcnak;
	input	wire		i_@$(PREFIX)_card_busy;
	input	wire	[1:0]	i_@$(PREFIX)_rx_strb;
	input	wire	[15:0]	i_@$(PREFIX)_rx_data;
		//
	input	wire		i_@$(PREFIX)_ac_valid;
	input	wire	[1:0]	i_@$(PREFIX)_ac_data;
	input	wire		i_@$(PREFIX)_ad_valid;
	input	wire	[31:0]	i_@$(PREFIX)_ad_data;
	output	wire		o_@$(PREFIX)_hwreset_n,
				o_@$(PREFIX)_1p8v;
	// Verilator lint_off UNUSED
	input	wire	[31:0]	i_@$(PREFIX)_debug;
	// Verilator lint_on  UNUSED
	// }}}
@MAIN.DEFNS=
	// @$(NAME) definitions
	// Verilator lint_off UNUSED
	wire	[31:0]	w_@$(PREFIX)_sdwb_debug;
	wire		s_@$(PREFIX)_ready,
			m_@$(PREFIX)_valid, m_@$(PREFIX)_last;
	reg	[31:0]	@$(PREFIX)_debug;
	wire	[31:0]	m_@$(PREFIX)_data;
	// assign		@$(PREFIX)_debug = i_@$(PREFIX)_debug;
	// Verilator lint_on  UNUSED
@MAIN.INSERT=
	////////////////////////////////////////////////////////////////////////
	//
	// @$(NAME) handling
	// {{{
	////////////////////////////////////////////////////////////////////////
	//
	//

	always @(*)
	begin
		@$(PREFIX)_debug = i_@$(PREFIX)_debug;
		@$(PREFIX)_debug = w_@$(PREFIX)_sdwb_debug;
	end

	sdio #(
		// {{{
		.LGFIFO(10), .NUMIO(@$(NUMIO)),
		.MW(@$(SLAVE.BUS.WIDTH)),
		.ADDRESS_WIDTH(@$(MASTER.BUS.AWID)+$clog2(@$(MASTER.BUS.WIDTH)/8)),
		.DMA_DW(@$(MASTER.BUS.WIDTH)),
		.OPT_SERDES(@$(OPT_SERDES)),
		.OPT_EMMC(@$(OPT_EMMC)),
		.OPT_DMA(@$(OPT_DMA)),
		.OPT_DDR(@$(OPT_DDR)),
		.OPT_HWRESET(@$(OPT_HWRESET)),
		.OPT_CARD_DETECT(@$(CARD_DETECT)),
		.OPT_CRCTOKEN(@$(CRCTOKEN)),
		.OPT_1P8V(@$(OPT_1P8V)),
`ifdef	VERILATOR
		.LGTIMEOUT(18),
`else
		.LGTIMEOUT(26),
`endif
		.OPT_ISTREAM(1'b0),
		.OPT_OSTREAM(1'b0)
		// }}}
	) u_@$(PREFIX)(
		// {{{
		.i_clk(@$(SLAVE.BUS.CLOCK.WIRE)),
		.i_reset(@$(SLAVE.BUS.CLOCK.RESET)),
		@$(SLAVE.ANSIPORTLIST),
		@$(MASTER.ANSIPORTLIST),
		// (Unused) DMA Stream assignments
		// {{{
		.s_valid(1'b0),
		.s_ready(s_@$(PREFIX)_ready),
		.s_data(32'h0),
		//
		.m_valid(m_@$(PREFIX)_valid),
		.m_ready(1'b1),
		.m_data(m_@$(PREFIX)_data),
		.m_last(m_@$(PREFIX)_last),
		// }}}
		.i_card_detect(i_@$(PREFIX)_detect),
		.o_hwreset_n(o_@$(PREFIX)_hwreset_n),
		.o_1p8v(o_@$(PREFIX)_1p8v),
		.o_int(@$(PREFIX)_int),
		//
		.o_cfg_ddr(o_@$(PREFIX)_cfg_ddr),
		.o_cfg_ds(o_@$(PREFIX)_cfg_ds),
		.o_cfg_dscmd(o_@$(PREFIX)_cfg_dscmd),
		.o_cfg_sample_shift(o_@$(PREFIX)_cfg_sample_shift),
		.o_cmd_tristate(o_@$(PREFIX)_cmd_tristate),
		.o_data_tristate(o_@$(PREFIX)_data_tristate),
		//
		.o_sdclk(   o_@$(PREFIX)_sdclk),
		.o_cmd_en(  o_@$(PREFIX)_cmd_en),
		.o_cmd_data(o_@$(PREFIX)_cmd_data),
		.o_data_en( o_@$(PREFIX)_data_en),
		.o_rx_en(   o_@$(PREFIX)_rx_en),
		.o_tx_data( o_@$(PREFIX)_tx_data),
		//
		.i_cmd_strb( i_@$(PREFIX)_cmd_strb),
		.i_cmd_data( i_@$(PREFIX)_cmd_data),
		.i_cmd_collision( i_@$(PREFIX)_cmd_collision),
		.i_crcack( i_@$(PREFIX)_crcack),
		.i_crcnak( i_@$(PREFIX)_crcnak),
		.i_card_busy(i_@$(PREFIX)_card_busy),
		.i_rx_strb(  i_@$(PREFIX)_rx_strb),
		.i_rx_data(  i_@$(PREFIX)_rx_data),
		//
		.S_AC_VALID(i_@$(PREFIX)_ac_valid),
		.S_AC_DATA( i_@$(PREFIX)_ac_data),
		.S_AD_VALID(i_@$(PREFIX)_ad_valid),
		.S_AD_DATA( i_@$(PREFIX)_ad_data),
		//
		.o_debug(w_@$(PREFIX)_sdwb_debug)
		// }}}
	);

	// }}}
@MAIN.ALT=
@REGS.N=5
@REGS.NOTE= // @$(NAME) addresses
@REGS.0= 0 R_@$(DEVID)_CTRL  	SDCARD
@REGS.1= 1 R_@$(DEVID)_DATA 	SDDATA
@REGS.2= 2 R_@$(DEVID)_FIFOA	SDFIFOA, SDFIF0, SDFIFA
@REGS.3= 3 R_@$(DEVID)_FIFOB	SDFIFOB, SDFIF1, SDFIFB
@REGS.4= 4 R_@$(DEVID)_PHY	SDPHY
@BDEF.DEFN=
////////////////////////////////////////////////////////////////////////////////
//
// @$(NAME) constants
// {{{
////////////////////////////////////////////////////////////////////////////////
//
//

// These will be defined in sdiodrv.h for the SDIO controller
struct @$(DEVID)_S;
// }}}
@BDEF.IONAME=_@$(PREFIX)
@BDEF.IOTYPE=struct @$(DEVID)_S
@BDEF.OSDEF=_BOARD_HAS_@$(DEVID)
@BDEF.OSVAL=static volatile @$(BDEF.IOTYPE) *const @$(BDEF.IONAME) = ((@$(BDEF.IOTYPE) *)@$[0x%08x](REGBASE));
@SIM.CLOCK=clk
@SIM.INCLUDE=
#include "sdiosim.h"
@SIM.DEFNS=
	SDIOSIM		*m_@$(PREFIX);
@SIM.FILE="sdcard.img"
@SIM.INIT=
#ifdef	@$(ACCESS)
		m_@$(PREFIX) = new SDIOSIM(@$(SIM.FILE));
		m_core->i_sdio_detect = 1;
		m_core->i_@$(PREFIX)_crcack = 0;
		m_core->i_@$(PREFIX)_crcnak = 0;
#endif
@SIM.TICK=
#ifdef	@$(ACCESS)
		{ unsigned	tmp, tmp_async;
		m_@$(PREFIX)->apply(
			(unsigned)m_core->o_@$(PREFIX)_sdclk,
			(unsigned)m_core->o_@$(PREFIX)_cfg_ddr,
			(unsigned)m_core->o_@$(PREFIX)_cmd_en,
			(unsigned)m_core->o_@$(PREFIX)_cmd_data,
			(unsigned)m_core->o_@$(PREFIX)_data_en,
			(unsigned)m_core->o_@$(PREFIX)_rx_en,
			(unsigned)m_core->o_@$(PREFIX)_tx_data,
			tmp, tmp_async,
			m_core->i_@$(PREFIX)_ad_data);
		m_core->i_@$(PREFIX)_cmd_strb = (tmp >> 30) & 3;
		m_core->i_@$(PREFIX)_cmd_data = (tmp >> 28) & 3;
		m_core->i_@$(PREFIX)_rx_strb  = (tmp >> 24) & 3;
		m_core->i_@$(PREFIX)_rx_data  =  tmp & 0x0ffff;
		m_core->i_@$(PREFIX)_ac_valid = (tmp_async & 2) ? 1:0;
		m_core->i_@$(PREFIX)_ad_valid =  tmp_async & 1;
		m_core->i_@$(PREFIX)_detect = 1;
		m_core->i_@$(PREFIX)_card_busy = m_@$(PREFIX)->card_busy() ? 1:0;
		m_core->i_@$(PREFIX)_crcack = m_@$(PREFIX)->crctoken();
		m_core->i_@$(PREFIX)_crcnak = (m_core->i_@$(PREFIX)_crcack & 2)?1:0;
		m_core->i_@$(PREFIX)_crcack &= 1;

		if (!m_core->o_@$(PREFIX)_cfg_dscmd) {
			m_core->i_@$(PREFIX)_ac_valid = 0;
			m_core->i_@$(PREFIX)_ac_data = 0;
		} if (!m_core->o_@$(PREFIX)_cfg_ds) {
			m_core->i_@$(PREFIX)_ad_valid = 0;
			m_core->i_@$(PREFIX)_ad_data = 0;
		} }
#endif
@RTL.MAKE.GROUP= SDIO
@RTL.MAKE.SUBD=sdspi
@RTL.MAKE.FILES= sdio.v sdfrontend.v sdckgen.v sdwb.v sdtxframe.v sdrxframe.v sdcmd.v sddma.v sddma_mm2s.v sddma_rxgears.v sdfifo.v sddma_txgears.v sddma_s2mm.v xsdddr.v xsdserdes8x.v
@XDC.SERDES=
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ u_@$(PREFIX)_frontend/GEN_WIDE_IO.r_debug*}] -to [get_cells -hier -filter {NAME=~ u_@$(PREFIX)_frontend/GEN_WIDE_IO.cmd_serdes/u_oserdes*}] 4.0
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ u_@$(PREFIX)_frontend/GEN_WIDE_IO.r_debug*}] -to [get_cells -hier -filter {NAME=~ u_@$(PREFIX)_frontend/GEN_WIDE_IO.GEN_WIDE_DATIO*.io_serdes/u_oserdes*}] 4.0
@XDC.INSERT=
set_property -dict { PULLTYPE PULLUP } [get_ports io_@$(TOP.IOPREFIX)_cmd]
@$(XDC.SERDES)
