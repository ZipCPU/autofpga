################################################################################
##
## Filename:	auto-data/spio.txt
##
## Project:	AutoFPGA, a utility for composing FPGA designs from peripherals
## {{{
## Purpose:	To describe how to interact with the special purpose device
##		controller (spio) for the Nexys Video Board (SW, BTN, LEDs)
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2017-2024, Gisselquist Technology, LLC
## {{{
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	GPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
## }}}
@PREFIX=spio
@DEVID=SPIO
@NADDR=1
@SLAVE.TYPE=SINGLE
@SLAVE.BUS=wb32
@ACCESS=@$(DEVID)_ACCESS
@INT.SPIO.WIRE=@$(PREFIX)_int
@INT.SPIO.PIC=buspic
@NLED=8
@NBTN=5
@NSW=8
@TOP.DEFNS=
	wire	[@$(NLED)-1:0]	w_led;
@TOP.INSERT=
	assign	o_led = { w_led[@$(NLED)-1:3],
			(w_led[2] || !syncd_stable[3]),
			(w_led[1] || !clocks_locked),
			(w_led[0] || s_reset) };
@TOP.MAIN=
		i_sw, i_btnc, i_btnd, i_btnl, i_btnr, i_btnu, w_led
@MAIN.PORTLIST=
		// SPIO interface
		i_sw, i_btnc, i_btnd, i_btnl, i_btnr, i_btnu, o_led
@MAIN.IODECL=
	// @$(DEVID) interface
	input	wire	[@$(NSW)-1:0]	i_sw;
	input	wire		i_btnc, i_btnd, i_btnl, i_btnr, i_btnu;
	output	wire	[@$(NLED)-1:0]	o_led;
@MAIN.DEFNS=
	wire	[@$(NBTN)-1:0]	w_btn;
	wire	[@$(NLED)-1:0]	w_led;
@MAIN.INSERT=
	//
	// Special purpose I/O driver (buttons, LEDs, and switches)
	//
	assign	w_btn = { i_btnc, i_btnd, i_btnl, i_btnr, i_btnu };

	spio #(
		.NBTN(@$(NBTN)), .NLEDS(@$(NLED)), .NSW(@$(NSW))
	) u_@$(PREFIX) (
		.i_clk(i_clk), .i_reset(i_reset),
		@$(SLAVE.ANSIPORTLIST),
		.i_sw(i_sw), .i_btn(w_btn), .o_led(w_led),
		.o_int(@$(PREFIX)_int)
	);

	assign	o_led = w_led;

@MAIN.ALT=
	assign	w_btn = 0;
	assign	o_led = 0;
@REGS.N=1
@REGS.0= 0 R_@$(DEVID) @$(DEVID)
@BDEF.DEFN=
#define	SPIO_BTNC	0x01000
#define	SPIO_BTND	0x00800
#define	SPIO_BTNL	0x00400
#define	SPIO_BTNR	0x00200
#define	SPIO_BTNU	0x00100
@BDEF.IONAME=_@$(PREFIX)
@BDEF.IOTYPE=unsigned
@BDEF.OSDEF= _BOARD_HAS_@$(DEVID)
@BDEF.OSVAL= static volatile @$(BDEF.IOTYPE) *const @$(BDEF.IONAME) = ((@$(BDEF.IOTYPE) *)@$[0x%08x](REGBASE));
