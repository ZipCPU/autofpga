################################################################################
##
## Filename: 	vidarbiter.txt
##
## Project:	VideoZip, a ZipCPU SoC supporting video functionality
##
## Purpose:	
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
##
## Copyright (C) 2017-2019, Gisselquist Technology, LLC
##
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of  the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
##
## License:	GPL, v3, as defined and found on www.gnu.org,
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
##
@PREFIX=vid_bus
# @$NADDR=(1<<@$(BUS.AWID))
@$NADDR=(1<<25)
@MASTER.TYPE=NONE
@MASTER.BUS=sdr
@ERROR.WIRE=@$(PREFIX)_err
@SLAVE.TYPE=BUS
@SLAVE.BUS.NAME=vid
@SLAVE.BUS.WIDTH=@$(MWIDTH)
# @SLAVE.BUS.CLOCK=@$(MCLOCK)
@BUS.NAME=sdr
# @MWIDTH=@$(BUS.WIDTH)
@MWIDTH=128
# @MCLOCK=@$(BUS.CLOCK)
##
@PREFIX=sdram_arbiter
@$NADDR=(1<<@$(SLAVE.BUS.AWID))
@ERROR.WIRE=@$(PREFIX)_err
@SLAVE.TYPE=BUS
@SLAVE.BUS.NAME=xpand_bus
@$SLAVE.BUS.WIDTH=128
@MASTER.TYPE=ARBITER
@MASTER.BUS=sdr
@MBUS=@$(MASTER.BUS.NAME)
@$AWID=@$(MASTER.BUS.AWID)
@$NADDR=(1<<@$(MASTER.BUS.AWID))
@PARTNER=vid_bus
@MAIN.DEFNS=
	// Bus arbiter's internal lines
	wire		@$(PREFIX)i_cyc, @$(PREFIX)i_stb, @$(PREFIX)i_we,
			@$(PREFIX)i_ack, @$(PREFIX)i_stall, @$(PREFIX)i_err;
	wire	[(@$(AWID)-1):0]	@$(PREFIX)i_addr;
	wire	[(@$(MASTER.BUS.WIDTH)-1):0]	@$(PREFIX)i_odata, @$(PREFIX)i_idata;
	wire	[(@$(MASTER.BUS.NSELECT)-1):0]	@$(PREFIX)i_sel;
@MAIN.INSERT=
	//
	//
	// Arbitrate between two busses
	//
	//
	// Clock speed = @$(CLOCK.FREQUENCY)
	wbpriarbiter #(@$(MASTER.BUS.WIDTH),@$(AWID))
		@$(MASTER.BUS.NAME)_arb(i_clk,
			vid_cyc, (vid_stb)&&(@$(PARTNER)_sel), vid_we, vid_addr,
				vid_data, vid_sel,
			@$(PARTNER)_ack, @$(PARTNER)_stall, @$(PARTNER)_err,
		// The UART interface master
		@$(SLAVE.BUS.NAME)_cyc,
			(@$(SLAVE.BUS.NAME)_stb)&&(@$(PREFIX)_sel),
			@$(SLAVE.BUS.NAME)_we,
			@$(SLAVE.BUS.NAME)_addr[(@$(AWID)-1):0],
			@$(SLAVE.BUS.NAME)_data, @$(SLAVE.BUS.NAME)_sel,
			@$(PREFIX)_ack, @$(PREFIX)_stall, @$(PREFIX)_err,
		// Common bus returns
		@$(PREFIX)i_cyc, @$(PREFIX)i_stb, @$(PREFIX)i_we, @$(PREFIX)i_addr, @$(PREFIX)i_odata, @$(PREFIX)i_sel,
			@$(PREFIX)i_ack, @$(PREFIX)i_stall, @$(PREFIX)i_err);

	busdelay #(@$(AWID),@$(MASTER.BUS.WIDTH)) @$(PREFIX)i_delay(
		@$(MASTER.BUS.CLOCK.WIRE), i_reset,
		@$(PREFIX)i_cyc, @$(PREFIX)i_stb, @$(PREFIX)i_we, @$(PREFIX)i_addr, @$(PREFIX)i_odata, @$(PREFIX)i_sel,
			@$(PREFIX)i_ack, @$(PREFIX)i_stall, @$(PREFIX)i_idata, @$(PREFIX)i_err,
		@$(MBUS)_cyc, @$(MBUS)_stb, @$(MBUS)_we, @$(MBUS)_addr, @$(MBUS)_data, @$(MBUS)_sel,
			@$(MBUS)_ack, @$(MBUS)_stall, @$(MBUS)_idata, @$(MBUS)_err);
	assign	@$(PREFIX)_data  = @$(PREFIX)i_idata;
	assign	@$(PARTNER)_data = @$(PREFIX)i_idata;
@RTL.MAKE.GROUP= BUSDLY
@RTL.MAKE.FILES= busdelay.v
@RTL.MAKE.SUBD=cpu
