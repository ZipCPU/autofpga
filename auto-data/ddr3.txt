################################################################################
##
## Filename:	auto-data/ddr3.txt
##
## Project:	AutoFPGA, a utility for composing FPGA designs from peripherals
## {{{
## Purpose:	To describe how to connect an open source DDR3 controller to
##		the design, via the Wishbone bus.
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2017-2024, Gisselquist Technology, LLC
## {{{
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	GPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
## }}}
# Wishbone 1
@PREFIX=ddr3
@DEVID=SDRAM
@ACCESS=@$(DEVID)_ACCESS
## LGMEMSZ is the size of the SDRAM in bytes. For a 1GB DDR3 RAM: 30 => 1GB
@$LGMEMSZ=30
@LGMEMSZ.FORMAT=%d
@$NADDR=(1<< @$(LGMEMSZ))/(@$(SLAVE.BUS.WIDTH)/8)
@$NBYTES=(1<<(@$LGMEMSZ))
@NBYTES.FORMAT=0x%08x
@$MADDR= @$(REGBASE)
@MADDR.FORMAT=0x%08x
@$NLANES=@$(SLAVE.BUS.WIDTH)/64
@SLAVE.TYPE=MEMORY
@SLAVE.BUS=wbwide
@SLAVE.ORDER=100
@BUS=wbwide
@LD.PERM=wx
@LD.NAME=sdram
#
@REGS.N=1
@REGS.0= 0 R_@$(DEVID) @$(DEVID)
@REGDEFS.H.DEFNS=
#define	@$(DEVID)BASE	@$[0x%08x](REGBASE)
#define	@$(DEVID)LEN	@$(NBYTES)
@BDEF.OSDEF=_BOARD_HAS_@$(DEVID)
@BDEF.OSVAL=extern char	_@$(PREFIX)[@$NBYTES];

@TOP.PORTLIST=
		// DDR3 I/O port wires
		o_ddr3_reset_n, o_ddr3_cke, o_ddr3_clk_p, o_ddr3_clk_n,
			o_ddr3_vsel,
		o_ddr3_cs_n, o_ddr3_ras_n, o_ddr3_cas_n, o_ddr3_we_n,
		o_ddr3_ba, o_ddr3_a,
		o_ddr3_odt, o_ddr3_dm,
		io_ddr3_dqs_p, io_ddr3_dqs_n, io_ddr3_dq

@TOP.PARAM=
	localparam real @$(DEVID)CONTROLLER_CLK_PERIOD = 10_000,  //ps, clock period of the controller interface
		DDR3_CLK_PERIOD = 2_500; //ps, clock period of the DDR3 RAM device (must be 1/4 of the CONTROLLER_CLK_PERIOD) 
	localparam @$(DEVID)ROW_BITS = 14,  // width of row address
		@$(DEVID)COL_BITS = 10,  // width of column address
		@$(DEVID)BA_BITS  =  3,  // width of bank address
		@$(DEVID)DQ_BITS  =  8,  // Size of one octet
		@$(DEVID)BYTE_LANES = @$(NLANES), //8 lanes of DQ
		@$(DEVID)AUX_WIDTH = 4, //width of aux line (must be >= 4) 
		@$(DEVID)SERDES_RATIO = $rtoi(@$(DEVID)CONTROLLER_CLK_PERIOD/DDR3_CLK_PERIOD),
		//4 is the width of a single ddr3 command {cs_n, ras_n, cas_n, we_n} plus 3 (ck_en, odt, reset_n) plus bank bits plus row bits
		@$(DEVID)CMD_LEN = 4 + 3 + @$(DEVID)BA_BITS + @$(DEVID)ROW_BITS;


@TOP.IODECL=
	// I/O declarations for the DDR3 SDRAM
	// {{{
	output	wire		o_ddr3_reset_n;
	output	wire	[0:0]	o_ddr3_cke;
	output	wire	[0:0]	o_ddr3_clk_p, o_ddr3_clk_n;
	output	wire	[0:0]	o_ddr3_cs_n; // o_ddr3_s_n[1] is set to 0 since controller only support single rank
	output	wire		o_ddr3_vsel;
	output	wire	[0:0]	o_ddr3_ras_n, o_ddr3_cas_n, o_ddr3_we_n;
	output	wire	[@$(DEVID)BA_BITS-1:0]	o_ddr3_ba;
	output	wire	[14:0]	o_ddr3_a; //set to max of 16 bits, but only ROW_BITS bits are relevant
	output	wire	[0:0]	o_ddr3_odt;
	output	wire	[@$(DEVID)BYTE_LANES-1:0]	o_ddr3_dm;
	inout	wire	[(@$(DEVID)DQ_BITS*@$(DEVID)BYTE_LANES)/8-1:0]	io_ddr3_dqs_p, io_ddr3_dqs_n;
	inout	wire	[(@$(DEVID)DQ_BITS*@$(DEVID)BYTE_LANES)-1:0]	io_ddr3_dq;
	// }}}

@TOP.DEFNS=
	wire		s_clk, s_reset;
	reg	[2:0]	clk_reset_pipe;
	// Wires connected to PHY interface of DDR3 controller
	// {{{
	genvar @$(PREFIX)gen_index;

	wire	[@$(DEVID)DQ_BITS*@$(DEVID)BYTE_LANES*8-1:0] @$(PREFIX)_iserdes_data;
	wire	[@$(DEVID)BYTE_LANES*8-1:0] @$(PREFIX)_iserdes_dqs,
				@$(PREFIX)_iserdes_bitslip_reference;
	wire    [@$(DEVID)CMD_LEN*@$(DEVID)SERDES_RATIO-1:0]
				@$(PREFIX)_cmd;
	wire    [@$(DEVID)DQ_BITS*@$(DEVID)BYTE_LANES*8-1:0]
				@$(PREFIX)_data;
	wire    [(@$(DEVID)DQ_BITS*@$(DEVID)BYTE_LANES*8)/8-1:0]
				@$(PREFIX)_dm;
	wire    [4:0]	@$(PREFIX)_odelay_data_cntvaluein,
			@$(PREFIX)_odelay_dqs_cntvaluein,
			@$(PREFIX)_idelay_data_cntvaluein,
			@$(PREFIX)_idelay_dqs_cntvaluein;
	wire    [@$(DEVID)BYTE_LANES-1:0]	@$(PREFIX)_odelay_data_ld,
			@$(PREFIX)_odelay_dqs_ld, @$(PREFIX)_idelay_data_ld,
			@$(PREFIX)_idelay_dqs_ld, @$(PREFIX)_bitslip,
			@$(PREFIX)_debug_read_dqs_p,
			@$(PREFIX)_debug_read_dqs_n;
	wire    @$(PREFIX)_idelayctrl_rdy,
		@$(PREFIX)_dqs_tri_control, @$(PREFIX)_dq_tri_control,
		@$(PREFIX)_toggle_dqs, @$(PREFIX)_write_leveling_calib,
		@$(PREFIX)_reset;
	wire    @$(PREFIX)_debug_clk_p, @$(PREFIX)_debug_clk_n;
	// }}}
@TOP.MAIN=
	// DDR3 Controller-PHY Interface
	@$(PREFIX)_iserdes_data, @$(PREFIX)_iserdes_dqs,
	@$(PREFIX)_iserdes_bitslip_reference,
	@$(PREFIX)_idelayctrl_rdy,
	@$(PREFIX)_cmd,
	@$(PREFIX)_dqs_tri_control, @$(PREFIX)_dq_tri_control,
	@$(PREFIX)_toggle_dqs, @$(PREFIX)_data, @$(PREFIX)_dm,
	@$(PREFIX)_odelay_data_cntvaluein, @$(PREFIX)_odelay_dqs_cntvaluein,
	@$(PREFIX)_idelay_data_cntvaluein, @$(PREFIX)_idelay_dqs_cntvaluein,
	@$(PREFIX)_odelay_data_ld, @$(PREFIX)_odelay_dqs_ld,
	@$(PREFIX)_idelay_data_ld, @$(PREFIX)_idelay_dqs_ld,
	@$(PREFIX)_bitslip,
	@$(PREFIX)_write_leveling_calib,
	@$(PREFIX)_reset
@TOP.INSERT=
	assign	s_clk = s_clksync;
	assign	o_ddr3_vsel = 1'bz;

	always @(posedge s_clk or negedge clocks_locked)
	if (!clocks_locked)
		clk_reset_pipe <= 3'h7;
	else
		clk_reset_pipe <= { clk_reset_pipe[1:0], 1'b0 };

	assign	s_reset = clk_reset_pipe[2];

	// DDR3 PHY Instantiation
	ddr3_phy #(
		// {{{
		.ROW_BITS(@$(DEVID)ROW_BITS),	//width of row address
		.BA_BITS(@$(DEVID)BA_BITS),	//width of bank address
		.DQ_BITS(@$(DEVID)DQ_BITS),	//width of DQ
		.LANES(@$(DEVID)BYTE_LANES), //8 lanes of DQ
		.CONTROLLER_CLK_PERIOD(@$(DEVID)CONTROLLER_CLK_PERIOD), //ns, period of clock input to this DDR3 controller module
		.DDR3_CLK_PERIOD(DDR3_CLK_PERIOD), //ns, period of clock input to DDR3 RAM device
		.ODELAY_SUPPORTED(1)
		// }}}
	) ddr3_phy_inst (
		// {{{
		// clock and reset
		.i_controller_clk(s_clksync),
		.i_ddr3_clk(s_clk_400mhz),
		.i_ref_clk(s_clk_200mhz),
		.i_ddr3_clk_90(0), //required only when ODELAY_SUPPORTED is zero
		.i_rst_n(!s_reset),
		// Controller Interface
		.i_controller_reset(@$(PREFIX)_reset),
		.i_controller_cmd(@$(PREFIX)_cmd),
		.i_controller_dqs_tri_control(@$(PREFIX)_dqs_tri_control),
		.i_controller_dq_tri_control(@$(PREFIX)_dq_tri_control),
		.i_controller_toggle_dqs(@$(PREFIX)_toggle_dqs),
		.i_controller_data(@$(PREFIX)_data),
		.i_controller_dm(@$(PREFIX)_dm),
		.i_controller_odelay_data_cntvaluein(@$(PREFIX)_odelay_data_cntvaluein),
		.i_controller_odelay_dqs_cntvaluein(@$(PREFIX)_odelay_dqs_cntvaluein),
		.i_controller_idelay_data_cntvaluein(@$(PREFIX)_idelay_data_cntvaluein),
		.i_controller_idelay_dqs_cntvaluein(@$(PREFIX)_idelay_dqs_cntvaluein),
		.i_controller_odelay_data_ld(@$(PREFIX)_odelay_data_ld),
		.i_controller_odelay_dqs_ld(@$(PREFIX)_odelay_dqs_ld),
		.i_controller_idelay_data_ld(@$(PREFIX)_idelay_data_ld),
		.i_controller_idelay_dqs_ld(@$(PREFIX)_idelay_dqs_ld),
		.i_controller_bitslip(@$(PREFIX)_bitslip),
		.i_controller_write_leveling_calib(@$(PREFIX)_write_leveling_calib),
		.o_controller_iserdes_data(@$(PREFIX)_iserdes_data),
		.o_controller_iserdes_dqs(@$(PREFIX)_iserdes_dqs),
		.o_controller_iserdes_bitslip_reference(@$(PREFIX)_iserdes_bitslip_reference),
		.o_controller_idelayctrl_rdy(@$(PREFIX)_idelayctrl_rdy),
		// DDR3 I/O Interface
		.o_ddr3_clk_p(o_ddr3_clk_p),
		.o_ddr3_clk_n(o_ddr3_clk_n),
		.o_ddr3_reset_n(o_ddr3_reset_n),
		.o_ddr3_cke(o_ddr3_cke[0]), // CKE
		.o_ddr3_cs_n(o_ddr3_cs_n[0]), // chip select signal (controls rank 1 only)
		.o_ddr3_ras_n(o_ddr3_ras_n), // RAS#
		.o_ddr3_cas_n(o_ddr3_cas_n), // CAS#
		.o_ddr3_we_n(o_ddr3_we_n), // WE#
		.o_ddr3_addr(o_ddr3_a[@$(DEVID)ROW_BITS-1:0]),
		.o_ddr3_ba_addr(o_ddr3_ba),
		.io_ddr3_dq(io_ddr3_dq),
		.io_ddr3_dqs(io_ddr3_dqs_p),
		.io_ddr3_dqs_n(io_ddr3_dqs_n),
		.o_ddr3_dm(o_ddr3_dm),
		.o_ddr3_odt(o_ddr3_odt[0]), // on-die termination
		// DEBUG PHY
		.o_ddr3_debug_read_dqs_p(@$(PREFIX)_debug_read_dqs_p),
		.o_ddr3_debug_read_dqs_n(@$(PREFIX)_debug_read_dqs_n)
		// }}}
	);

	generate for(@$(PREFIX)gen_index = @$(DEVID)ROW_BITS;
			@$(PREFIX)gen_index < 15;
			@$(PREFIX)gen_index = @$(PREFIX)gen_index + 1)
	begin : GEN_UNUSED_@$(DEVID)_ASSIGN
		assign o_ddr3_a[@$(PREFIX)gen_index] = 0;
	end endgenerate
@MAIN.PORTLIST=
		// DDR3 Controller Interface
		i_@$(PREFIX)_iserdes_data, i_@$(PREFIX)_iserdes_dqs,
		i_@$(PREFIX)_iserdes_bitslip_reference,
		i_@$(PREFIX)_idelayctrl_rdy,
		o_@$(PREFIX)_cmd,
		o_@$(PREFIX)_dqs_tri_control, o_@$(PREFIX)_dq_tri_control,
		o_@$(PREFIX)_toggle_dqs, o_@$(PREFIX)_data, o_@$(PREFIX)_dm,
		o_@$(PREFIX)_odelay_data_cntvaluein, o_@$(PREFIX)_odelay_dqs_cntvaluein,
		o_@$(PREFIX)_idelay_data_cntvaluein, o_@$(PREFIX)_idelay_dqs_cntvaluein,
		o_@$(PREFIX)_odelay_data_ld, o_@$(PREFIX)_odelay_dqs_ld,
		o_@$(PREFIX)_idelay_data_ld, o_@$(PREFIX)_idelay_dqs_ld,
		o_@$(PREFIX)_bitslip,
		o_@$(PREFIX)_leveling_calib,
		o_@$(PREFIX)_reset
@MAIN.PARAM=@$(TOP.PARAM)
@MAIN.IODECL=
	// DDR3 Controller I/O declarations
	// {{{
	input	wire	[@$(DEVID)DQ_BITS*@$(DEVID)BYTE_LANES*8-1:0] i_@$(PREFIX)_iserdes_data;
	input wire    [@$(DEVID)BYTE_LANES*8-1:0] i_@$(PREFIX)_iserdes_dqs;
	input wire    [@$(DEVID)BYTE_LANES*8-1:0] i_@$(PREFIX)_iserdes_bitslip_reference;
	input wire    i_@$(PREFIX)_idelayctrl_rdy;
	output wire    [@$(DEVID)CMD_LEN*@$(DEVID)SERDES_RATIO-1:0] o_@$(PREFIX)_cmd;
	output wire    o_@$(PREFIX)_dqs_tri_control, o_@$(PREFIX)_dq_tri_control;
	output wire    o_@$(PREFIX)_toggle_dqs;
	output wire    [@$(DEVID)DQ_BITS*@$(DEVID)BYTE_LANES*8-1:0] o_@$(PREFIX)_data;
	output wire    [(@$(DEVID)DQ_BITS*@$(DEVID)BYTE_LANES*8)/8-1:0] o_@$(PREFIX)_dm;
	output wire    [4:0] o_@$(PREFIX)_odelay_data_cntvaluein, o_@$(PREFIX)_odelay_dqs_cntvaluein;
	output wire    [4:0] o_@$(PREFIX)_idelay_data_cntvaluein, o_@$(PREFIX)_idelay_dqs_cntvaluein;
	output wire    [@$(DEVID)BYTE_LANES-1:0] o_@$(PREFIX)_odelay_data_ld, o_@$(PREFIX)_odelay_dqs_ld;
	output wire    [@$(DEVID)BYTE_LANES-1:0] o_@$(PREFIX)_idelay_data_ld, o_@$(PREFIX)_idelay_dqs_ld;
	output wire    [@$(DEVID)BYTE_LANES-1:0] o_@$(PREFIX)_bitslip;
	output wire    o_@$(PREFIX)_leveling_calib;
	output wire    o_@$(PREFIX)_reset;
	// }}}
@MAIN.DEFNS=
	// Verilator lint_off UNUSED
	wire	[@$(DEVID)AUX_WIDTH-1:0]	@$(PREFIX)_aux_out;
	wire	[31:0]	@$(PREFIX)_debug;
	// Verilator lint_on  UNUSED
@MAIN.INSERT=
	////////////////////////////////////////////////////////////////////////
	//
	// DDR3 Controller instantiation
	// {{{
           
	ddr3_controller #(
		// {{{
		.CONTROLLER_CLK_PERIOD(@$(DEVID)CONTROLLER_CLK_PERIOD), //ps, clock period of the controller interface
		.DDR3_CLK_PERIOD(DDR3_CLK_PERIOD), //ps, clock period of the DDR3 RAM device (must be 1/4 of the CONTROLLER_CLK_PERIOD) 
		.ROW_BITS(@$(DEVID)ROW_BITS),	//width of row address
		.COL_BITS(@$(DEVID)COL_BITS),	//width of column address
		.BA_BITS(@$(DEVID)BA_BITS),	//width of bank address
		.DQ_BITS(@$(DEVID)DQ_BITS),	//width of DQ
		.LANES(@$(DEVID)BYTE_LANES),		// byte lanes
		.AUX_WIDTH(@$(DEVID)AUX_WIDTH),	//width of aux line (must be >= 4) 
		.WB2_ADDR_BITS(7), 		//width of 2nd wishbone address bus 
            	.WB2_DATA_BITS(32),  		//width of 2nd wishbone data bus
		.MICRON_SIM(0),		//simulation for micron ddr3 model (shorten POWER_ON_RESET_HIGH and INITIAL_CKE_LOW)
		.ODELAY_SUPPORTED(1),		//set to 1 when ODELAYE2 is supported
		.SECOND_WISHBONE(1) 		//set to 1 if 2nd wishbone is needed 
		// }}}
	) u_@$(PREFIX) (
		// {{{
		.i_controller_clk(i_clk), //i_controller_clk has period of CONTROLLER_CLK_PERIOD
		.i_rst_n(!i_reset), //200MHz input clock
		// Wishbone 1 (Controller)
		@$(SLAVE.ANSIPORTLIST),
		.i_aux(0),
		.o_aux(@$(PREFIX)_aux_out),	// Leaving this empty would've caused a Verilator warning
		// Wishbone 2 (PHY)
		@$(ddr3_phy.SLAVE.ANSIPORTLIST),
		//
		// PHY interface
		.i_phy_iserdes_data(i_@$(PREFIX)_iserdes_data),
		.i_phy_iserdes_dqs(i_@$(PREFIX)_iserdes_dqs),
		.i_phy_iserdes_bitslip_reference(i_@$(PREFIX)_iserdes_bitslip_reference),
		.i_phy_idelayctrl_rdy(i_@$(PREFIX)_idelayctrl_rdy),
		.o_phy_cmd(o_@$(PREFIX)_cmd),
		.o_phy_dqs_tri_control(o_@$(PREFIX)_dqs_tri_control),
		.o_phy_dq_tri_control(o_@$(PREFIX)_dq_tri_control),
		.o_phy_toggle_dqs(o_@$(PREFIX)_toggle_dqs),
		.o_phy_data(o_@$(PREFIX)_data),
		.o_phy_dm(o_@$(PREFIX)_dm),
		.o_phy_odelay_data_cntvaluein(o_@$(PREFIX)_odelay_data_cntvaluein),
		.o_phy_odelay_dqs_cntvaluein(o_@$(PREFIX)_odelay_dqs_cntvaluein),
		.o_phy_idelay_data_cntvaluein(o_@$(PREFIX)_idelay_data_cntvaluein),
		.o_phy_idelay_dqs_cntvaluein(o_@$(PREFIX)_idelay_dqs_cntvaluein),
		.o_phy_odelay_data_ld(o_@$(PREFIX)_odelay_data_ld),
		.o_phy_odelay_dqs_ld(o_@$(PREFIX)_odelay_dqs_ld),
		.o_phy_idelay_data_ld(o_@$(PREFIX)_idelay_data_ld),
		.o_phy_idelay_dqs_ld(o_@$(PREFIX)_idelay_dqs_ld),
		.o_phy_bitslip(o_@$(PREFIX)_bitslip),
		.o_phy_write_leveling_calib(o_@$(PREFIX)_leveling_calib),
		.o_phy_reset(o_@$(PREFIX)_reset),
		// Debug port
		.o_debug1(@$(PREFIX)_debug),
		// Verilator lint_off PINCONNECTEMPTY
		.o_debug2(),
		.o_debug3()
		// Verilator lint_on  PINCONNECTEMPTY
		// }}}
	);
	// }}}
##
##
@PREFIX=ddr3_phy
@DEVID=DDR3_PHY
@ACCESS=@$(DEVID)_ACCESS
@$NADDR=128
@SLAVE.TYPE=OTHER
@SLAVE.BUS=wb32
@SLAVE.ANSPREFIX=wb2_
#
@REGS.N=7
@REGS.0= 0 R_@$(DEVID) @$(DEVID) DPHYSTAT0
@REGS.1=1 R_@$(DEVID)STAT1 @$(DEVID)STAT1 DPHYSTAT1
@REGS.2=2 R_@$(DEVID)STAT2 @$(DEVID)STAT2 DPHYSTAT2
@REGS.3=3 R_@$(DEVID)STAT3 @$(DEVID)STAT3 DPHYSTAT3
@REGS.4=4 R_@$(DEVID)CTRLSTAT @$(DEVID)CTRLSTAT DCTRLSTAT
@REGS.5=17 R_@$(DEVID)RESET @$(DEVID)RESET DCTRLRESET
@REGS.6=19 R_@$(DEVID)DBGSEL @$(DEVID)DBGSEL DCTRLDBG
@BDEF.DEFN=

## Define the structure of your PHY controller here.  How are the bits all
## layout out?  What register names do you have?  That should all go here.

typedef	struct	@$(DEVID)_S {
	unsigned	ph_something;
} @$(DEVID);

@BDEF.IONAME=_@$(PREFIX)
@BDEF.IOTYPE=@$(DEVID)
@BDEF.OSDEF=_BOARD_HAS_@$(DEVID)
@BDEF.OSVAL=static volatile @$(BDEF.IOTYPE) *const @$(BDEF.IONAME) = ((@$(BDEF.IOTYPE) *)@$[0x%08x](REGBASE));

@RTL.MAKE.GROUP=DDR3
@RTL.MAKE.SUBD=ddr3
@RTL.MAKE.FILES= ddr3_controller.v ddr3_phy.v
