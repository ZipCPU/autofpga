################################################################################
##
## Filename: 	sdspi.c
##
## Project:	AutoFPGA, a utility for composing FPGA designs from peripherals
##
## Purpose:	Describes how to connect an SD-SPI peripheral to a wishbone
##		bus, as used by autofpga.  Note how the description requires
##	both a description of what needs to take place in a top level file, as
##	well as in the main
##
##	An interesting consequence of this description is that upgrading to a
##	proper SDIO device would involve no more than swapping this file for an
##	sdio.c peripheral description file.
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
##
## Copyright (C) 2017-2018, Gisselquist Technology, LLC
##
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of  the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
##
## License:	GPL, v3, as defined and found on www.gnu.org,
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
##
@PREFIX=sdcard
@DEVID=SDSPI
@NADDR=4
@ACCESS=SDSPI_ACCESS
@SLAVE.TYPE=OTHER
@SLAVE.BUS=wb
@BUS.NAME=wb
# @SCOPE.TRIGGER=sd_debug[31]
# @SCOPE.DATA=sd_debug
@INT.SDCARD.WIRE= @$(PREFIX)_int
@INT.SDCARD.PIC= buspic syspic
@TOP.PORTLIST=
		// SD Card
		o_sd_sck, io_sd_cmd, io_sd, i_sd_cs, i_sd_wp
@TOP.IODECL=
	// SD Card
	output	wire		o_sd_sck;
	inout	wire		io_sd_cmd;
	inout	wire	[3:0]	io_sd;
	input	wire		i_sd_cs;
	input	wire		i_sd_wp;
@TOP.DEFNS=
	wire		w_sd_cmd;
	wire	[3:0]	w_sd_data;
@TOP.MAIN=
		// SD Card
		o_sd_sck, w_sd_cmd, w_sd_data, io_sd_cmd, io_sd, i_sd_cs
@TOP.INSERT=
	//
	//
	// Wires for setting up the SD Card Controller
	//
	//
	assign io_sd_cmd = w_sd_cmd ? 1'bz:1'b0;
	assign io_sd[0] = w_sd_data[0]? 1'bz:1'b0;
	assign io_sd[1] = w_sd_data[1]? 1'bz:1'b0;
	assign io_sd[2] = w_sd_data[2]? 1'bz:1'b0;
	assign io_sd[3] = w_sd_data[3]? 1'bz:1'b0;
@MAIN.PORTLIST=
		// The SD-Card wires
		o_sd_sck, o_sd_cmd, o_sd_data, i_sd_cmd, i_sd_data, i_sd_detect
@MAIN.IODECL=
	// SD-Card declarations
	output	wire		o_sd_sck, o_sd_cmd;
	output	wire	[3:0]	o_sd_data;
	// verilator lint_off UNUSED
	input	wire		i_sd_cmd;
	input	wire	[3:0]	i_sd_data;
	input	wire		i_sd_detect;
	// verilator lint_on  UNUSED
@MAIN.DEFNS=
	wire[31:0]	sdspi_debug;
@MAIN.INSERT=
	// SPI mapping
	wire	w_sd_cs_n, w_sd_mosi, w_sd_miso;

	sdspi	@$(PREFIX)i(i_clk,
		@$(BUS.NAME)_cyc,
			(@$(BUS.NAME)_stb)&&(@$(PREFIX)_sel),
			@$(BUS.NAME)_we,
			@$(BUS.NAME)_addr[1:0],
			@$(BUS.NAME)_data,
			@$(PREFIX)_ack, @$(PREFIX)_stall, @$(PREFIX)_data,
		w_sd_cs_n, o_sd_sck, w_sd_mosi, w_sd_miso,
		@$(PREFIX)_int, 1'b1, sdspi_debug);

	assign	w_sd_miso = i_sd_data[0];
	assign	o_sd_data = { w_sd_cs_n, 3'b111 };
	assign	o_sd_cmd  = w_sd_mosi;
@MAIN.ALT=
	assign	o_sd_sck   = 1'b1;
	assign	o_sd_cmd   = 1'b1;
	assign	o_sd_data  = 4'hf;
@TOP.INSERT=
	//
	//
	// Wires for setting up the SD Card Controller
	//
	//
	assign io_sd_cmd = w_sd_cmd ? 1'bz:1'b0;
	assign io_sd[0] = w_sd_data[0]? 1'bz:1'b0;
	assign io_sd[1] = w_sd_data[1]? 1'bz:1'b0;
	assign io_sd[2] = w_sd_data[2]? 1'bz:1'b0;
	assign io_sd[3] = w_sd_data[3]? 1'bz:1'b0;
@REGS.N=4
@REGS.NOTE= // SD-SPI addresses
@REGS.0= 0 R_@$(DEVID)_CTRL  	SDCARD
@REGS.1= 1 R_@$(DEVID)_DATA 	SDDATA
@REGS.2= 2 R_@$(DEVID)_FIFOA	SDFIFOA, SDFIF0, SDFIFA
@REGS.3= 3 R_@$(DEVID)_FIFOB	SDFIFOB, SDFIF1, SDFIFB
@BDEF.DEFN=
#define	@$(DEVID)_SETAUX	0x0ff
#define	@$(DEVID)_READAUX	0x0bf
#define	@$(DEVID)_CMD		0x040
#define	@$(DEVID)_ACMD		(0x040+55) // CMD55
#define	@$(DEVID)_FIFO_OP	0x0800	// Read only
#define	@$(DEVID)_WRITEOP	0x0c00	// Write to the FIFO
#define	@$(DEVID)_ALTFIFO	0x1000
#define	@$(DEVID)_BUSY		0x4000
#define	@$(DEVID)_ERROR	0x8000
#define	@$(DEVID)_CLEARERR	0x8000
#define	@$(DEVID)_READ_SECTOR	((@$(DEVID)_CMD|@$(DEVID)_CLEARERR|@$(DEVID)_FIFO_OP)+17)
#define	@$(DEVID)_WRITE_SECTOR	((@$(DEVID)_CMD|@$(DEVID)_CLEARERR|@$(DEVID)_WRITEOP)+24)

typedef	struct @$(DEVID)_S {
	unsigned	sd_ctrl, sd_data, sd_fifo[2];
} @$(DEVID);
@BDEF.IONAME=_sdcard
@BDEF.IOTYPE=@$(DEVID)
@BDEF.OSDEF=_BOARD_HAS_@$(DEVID)
@BDEF.OSVAL=static volatile @$BDEF.IOTYPE *const @$BDEF.IONAME = ((@$BDEF.IOTYPE *)@$[0x%08x](REGBASE));
@SIM.INCLUDE=
#include "sdspisim.h"
@SIM.DEFNS=
#ifdef	SDSPI_ACCESS
	SDSPISIM	m_sdcard;
#endif // @$(ACCESS)
@SIM.INIT=
#ifdef	@$(ACCESS)
		m_sdcard.debug(false);
#endif	// @$(ACCESS)
@SIM.METHODS=
#ifdef	@$(ACCESS)
	void	setsdcard(const char *fn) {
		m_sdcard.load(fn);
	}
#endif // @$(ACCESS)
@SIM.TICK=
#ifdef	@$(ACCESS)
		m_core->i_sd_data = m_sdcard((m_core->o_sd_data&8)?1:0,
				m_core->o_sd_sck, m_core->o_sd_cmd);
		m_core->i_sd_data &= 1;
		m_core->i_sd_data |= (m_core->o_sd_data&0x0e);
		m_core->i_sd_detect = 1;
#endif	// @$(ACCESS)
@SIM.DEFINES=

#ifndef	VVAR
#ifdef	NEW_VERILATOR
#define	VVAR(A)	main__DOT_ ## A
#else
#define	VVAR(A)	v__DOT_ ## A
#endif
#endif

#define	sd_cmd_busy	VVAR(_@$(PREFIX)i__DOT__r_cmd_busy)
#define	sd_clk		VVAR(_@$(PREFIX)i__DOT__r_sdspi_clk)
#define	sd_cmd_state	VVAR(_@$(PREFIX)i__DOT__r_cmd_state)
#define	sd_rsp_state	VVAR(_@$(PREFIX)i__DOT__r_rsp_state)
#define	sd_ll_cmd_stb	VVAR(_@$(PREFIX)__DOT__ll_cmd_stb)
#define	sd_ll_cmd_dat	VVAR(_@$(PREFIX)__DOT__ll_cmd_dat)
#define	sd_ll_z_counter	VVAR(_@$(PREFIX)__DOT__lowlevel__DOT__r_z_counter)
#define	sd_ll_clk_counter	VVAR(_@$(PREFIX)__DOT__lowlevel__DOT__r_clk_counter)
#define	sd_ll_idle	VVAR(_@$(PREFIX)__DOT__lowlevel__DOT__r_idle)
#define	sd_ll_state	VVAR(_@$(PREFIX)__DOT__lowlevel__DOT__r_state)
#define	sd_ll_byte	VVAR(_@$(PREFIX)__DOT__lowlevel__DOT__r_byte)
#define	sd_ll_ireg	VVAR(_@$(PREFIX)__DOT__lowlevel__DOT__r_ireg)
#define	sd_ll_out_stb	VVAR(_@$(PREFIX)__DOT__ll_out_stb)
#define	sd_ll_out_dat	VVAR(_@$(PREFIX)__DOT__ll_out_dat)
#define	sd_lgblklen	VVAR(_@$(PREFIX)__DOT__r_lgblklen)
#define	sd_fifo_rd_crc	VVAR(_@$(PREFIX)__DOT__fifo_rd_crc_reg)
#define	sd_cmd_crc	VVAR(_@$(PREFIX)__DOT__r_cmd_crc)
#define	sd_cmd_crc_cnt	VVAR(_@$(PREFIX)__DOT__r_cmd_crc_cnt)
#define	sd_fifo_rd_crc_stb	VVAR(_@$(PREFIX)__DOT__fifo_rd_crc_stb)
#define	ll_fifo_pkt_state	VVAR(_@$(PREFIX)__DOT__ll_fifo_pkt_state)
#define	sd_have_data_response_token	VVAR(_@$(PREFIX)__DOT__r_have_data_response_token)
#define	sd_fifo_wr_crc		VVAR(_@$(PREFIX)__DOT__fifo_wr_crc_reg)
#define	sd_fifo_wr_crc_stb	VVAR(_@$(PREFIX)__DOT__fifo_wr_crc_stb,)
#define	sd_ll_fifo_wr_state	VVAR(_@$(PREFIX)__DOT__ll_fifo_wr_state,)
#define	sd_ll_fifo_wr_complete	VVAR(_@$(PREFIX)__DOT__ll_fifo_wr_complete)
#define	sd_use_fifo	VVAR(_@$(PREFIX)__DOT__r_use_fifo)
#define	sd_fifo_wr	VVAR(_@$(PREFIX)__DOT__r_fifo_wr)

@SIM.DEBUG=
			/*
			printf(" SDSPI[%d,%d(%d),(%d)]",
				m_core->sd_cmd_busy,
				m_core->sd_clk,
				m_core->sd_cmd_state,
				m_core->sd_rsp_state);
			printf(" LL[%d,%2x->CK=%d/%2x,%s,ST=%2d,TX=%2x,RX=%2x->%d,%2x] ",
				m_core->sd_ll_cmd_stb,
				m_core->sd_ll_cmd_dat,
				m_core->sd_ll_z_counter,
				// (m_core->sd_ll_clk_counter==0)?1:0,
				m_core->sd_ll_clk_counter,
				(m_core->sd_ll_idle)?"IDLE":"    ",
				m_core->sd_ll_state,
				m_core->sd_ll_byte,
				m_core->sd_ll_ireg,
				m_core->sd_ll_out_stb,
				m_core->sd_ll_out_dat
				);
			printf(" CRC=%02x/%2d",
				m_core->sd_cmd_crc,
				m_core->sd_cmd_crc_cnt);
			printf(" SPI(%d,%d,%d/%d,%d)->?",
				m_core->o_sf_cs_n,
				m_core->o_sd_cs_n,
				m_core->o_spi_sck,
				m_core->@$(VERILATOR_PREFIX)__DOT__sdcard_sck,
				m_core->o_spi_mosi);

			printf(" CK=%d,LN=%d",
				m_core->sd_clk,
				m_core->sd_lgblklen);


			if (m_core->sd_use_fifo){
				printf(" FIFO");
				if (m_core->sd_fifo_wr)
					printf("-WR(%04x,%d,%d,%d)",
						m_core->sd_fifo_rd_crc,
						m_core->sd_fifo_rd_crc_stb,
						m_core->sd_ll_fifo_pkt_state,
						m_core->sd_have_data_response_token);
				else
					printf("-RD(%04x,%d,%d,%d)",
						m_core->sd_fifo_wr_crc,
						m_core->sd_fifo_wr_crc_stb,
						m_core->sd_ll_fifo_wr_state,
						m_core->sd_ll_fifo_wr_complete
						);
			}
			*/

#
#
#
@PREFIX=scope_sdcard
@SLAVE.TYPE=OTHER
@SLAVE.BUS=wb
@DEVID=SDSPI
@NADDR=2
@BUS.NAME=wb
@ACCESS=SDSPI_SCOPE
@DEPENDS=SDSPI_ACCESS
@INT.SDSCOPE.WIRE=@$(PREFIX)_int
@INT.SDSCOPE.BUS= buspic
@MAIN.DEFNS=
	wire	@$(PREFIX)_trigger,
		@$(PREFIX)_ce;
@MAIN.INSERT=
	assign	@$(PREFIX)_trigger = (@$(BUS.NAME)_stb)
				&&(sdcard_sel)&&(@$(BUS.NAME)_we);
	assign	@$(PREFIX)_ce = 1'b1;
	wbscope #(5'h9) sdspiscope(i_clk, @$(PREFIX)_ce,
			@$(PREFIX)_trigger,
			sdspi_debug,
			i_clk, @$(BUS.NAME)_cyc,
			(@$(BUS.NAME)_stb)&&(@$(PREFIX)_sel),
			@$(BUS.NAME)_we,
			@$(BUS.NAME)_addr[0],
			@$(BUS.NAME)_data,
			@$(PREFIX)_ack,
			@$(PREFIX)_stall,
			@$(PREFIX)_data,
			@$(PREFIX)_int);

@REGS.NOTE=// SDSPI Debugging scope
@REGS.N=2
@REGS.0= 0 R_@$(DEVID)_SCOPC SDSCOPC SDSCOPE
@REGS.1= 1 R_@$(DEVID)_SCOPD SDSCOPD
@BDEF.DEFN=
#ifndef	WBSCOPE_H
#define	WBSCOPE_H

#define	WBSCOPE_NO_RESET	0x800000000
#define	WBSCOPE_TRIGGER		(WBSCOPE_NO_RESET|0x08000000)
#define	WBSCOPE_MANUAL		(WBSCOPE_TRIGGER)
#define	WBSCOPE_DISABLE		0x04000000

typedef struct WBSCOPE_S {
	unsigned s_ctrl, s_data;
} WBSCOPE;
#endif
@BDEF.IONAME= _@$(PREFIX)
@BDEF.IOTYPE=WBSCOPE
@BDEF.OSDEF=_BOARD_HAS_SDSPI_SCOPE
@BDEF.OSVAL=static volatile @$BDEF.IOTYPE *const @$(BDEF.IONAME) = ((@$BDEF.IOTYPE *)@$[0x%08x](REGBASE));
@RTL.MAKE.GROUP= SDSPI
@RTL.MAKE.FILES= sdspi.v llsdspi.v wbscope.v
