################################################################################
##
## Filename: 	wbubus.txt
##
## Project:	AutoFPGA, a utility for composing FPGA designs from peripherals
##
## Purpose:	To describe what needs to be done to make the UART to Wishbone
##		external bus master a part of the main .v and toplevel.v files.
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
##
## Copyright (C) 2017-2019, Gisselquist Technology, LLC
##
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of  the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
##
## License:	GPL, v3, as defined and found on www.gnu.org,
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
##
@PREFIX=wbu
@ACCESS=WBUBUS_MASTER
@MASTER.TYPE=HOST
@MASTER.BUS=wbu
@BUS.NAME=wbu
@BUS.CLOCK=clk
@BUS.WIDTH=32
@BUS.TYPE=wb
@$BAUDRATE=1000000
@CLOCK.NAME=clk
@$SETUP=@$(CLOCK.FREQUENCY) / @$BAUDRATE
@SETUP.FORMAT=24'h%x
@$BUS_ADDRESS_WIDTH=@$(MASTER.BUS.AWID)
# @TOP.PORTLIST=
# 		// UART/host to wishbone interface
# 		i_host_uart_rx, o_host_uart_tx
# @TOP.IODECL=
# 	// UART/host to wishbone interface
# 	input	wire		i_host_uart_rx;
# 	output	wire		o_host_uart_tx;
# @TOP.MAIN=
# 		// External USB-UART bus control
# 		i_host_uart_rx, o_host_uart_tx
@MAIN.PORTLIST=
 		// UART/host to wishbone interface
 		i_host_uart_rx, o_host_uart_tx
@MAIN.IODECL=
	input	wire		i_host_uart_rx;
	output	wire		o_host_uart_tx;
@MAIN.DEFNS=
	//
	//
	// UART interface
	//
	//
	localparam [23:0] BUSUART = @$SETUP;	// @$BAUDRATE baud
	//
	wire	w_ck_uart, w_uart_tx;
	wire		rx_host_stb;
	wire	[7:0]	rx_host_data;
	wire		tx_host_stb;
	wire	[7:0]	tx_host_data;
	wire		tx_host_busy;
	//
	// Definitions for the WB-UART converter.  We really only need one
	// (more) non-bus wire--one to use to select if we are interacting
	// with the ZipCPU or not.
	wire		wbu_zip_sel;
	wire	[0:0]	wbubus_dbg;
`ifndef	INCLUDE_ZIPCPU
	//
	// The bus-console depends upon the zip_dbg wires.  If there is no
	// ZipCPU defining them, we'll need to define them here anyway.
	//
	wire		zip_dbg_ack, zip_dbg_stall;
	wire	[31:0]	zip_dbg_data;
`endif
@$ZIP_ADDRESS_BIT=@$BUS_ADDRESS_WIDTH-1
@$ZIP_ADDRESS=(1<<(@$THIS.ZIP_ADDRESS_BIT+2))
@ZIP_ADDRESS.FORMAT= 0x%08x
@$ZIP_DBGDATA=4+@$.ZIP_ADDRESS
@ZIP_DBGDATA.FORMAT= 0x%08x
@MAIN.INSERT=
	// The Host USB interface, to be used by the WB-UART bus
	rxuartlite	#(BUSUART) rcv(s_clk, i_host_uart_rx,
				rx_host_stb, rx_host_data);
	txuartlite	#(BUSUART) txv(s_clk, tx_host_stb, tx_host_data,
				o_host_uart_tx, tx_host_busy);

`ifdef	INCLUDE_ZIPCPU
	// assign	wbu_zip_sel   = wbu_addr[@$.ZIP_ADDRESS_BIT];
`else
	assign	wbu_zip_sel   = 1'b0;
	assign	zip_dbg_ack   = 1'b0;
	assign	zip_dbg_stall = 1'b0;
	assign	zip_dbg_data  = 0;
`endif
`ifndef	BUSPIC_ACCESS
	wire	w_bus_int;
	assign	w_bus_int = 1'b0;
`endif
	wire	[31:0]	wbu_tmp_addr;
	wbubus	genbus(i_clk, i_host_rx_stb, i_host_rx_data,
			wbu_cyc, wbu_stb, wbu_we, wbu_tmp_addr, wbu_data,
			(wbu_zip_sel)?zip_dbg_ack:wbu_ack,
			(wbu_zip_sel)?zip_dbg_stall:wbu_stall,
				(wbu_zip_sel)?1'b0:wbu_err,
				(wbu_zip_sel)?zip_dbg_data:wbu_idata,
			w_bus_int,
			o_host_tx_stb, o_host_tx_data, i_host_tx_busy,
			wbubus_dbg[0]);
	assign	wbu_sel = 4'hf;
	assign	wbu_addr = wbu_tmp_addr[(@$BUS_ADDRESS_WIDTH-1):0];
@REGDEFS.H.DEFNS=
#define	R_ZIPCTRL	@$.ZIP_ADDRESS
#define	R_ZIPDATA	@$.ZIP_DBGDATA
#
SIM.CLOCK=clk
SIM.TICK=
		m_core->i_host_uart_rx = (*m_dbgbus)(m_core->o_host_uart_tx);
